# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ReImportScan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scan_date': 'date',
        'minimum_severity': 'str',
        'active': 'bool',
        'verified': 'bool',
        'scan_type': 'str',
        'endpoint_to_add': 'int',
        'file': 'str',
        'product_type_name': 'str',
        'product_name': 'str',
        'engagement_name': 'str',
        'test': 'int',
        'test_title': 'str',
        'auto_create_context': 'bool',
        'push_to_jira': 'bool',
        'close_old_findings': 'bool',
        'version': 'str',
        'build_id': 'str',
        'branch_tag': 'str',
        'commit_hash': 'str',
        'api_scan_configuration': 'int',
        'service': 'str',
        'environment': 'str',
        'lead': 'int',
        'tags': 'list[str]',
        'group_by': 'str',
        'test_id': 'int',
        'engagement_id': 'int',
        'product_id': 'int',
        'product_type_id': 'int',
        'statistics': 'ImportStatistics'
    }

    attribute_map = {
        'scan_date': 'scan_date',
        'minimum_severity': 'minimum_severity',
        'active': 'active',
        'verified': 'verified',
        'scan_type': 'scan_type',
        'endpoint_to_add': 'endpoint_to_add',
        'file': 'file',
        'product_type_name': 'product_type_name',
        'product_name': 'product_name',
        'engagement_name': 'engagement_name',
        'test': 'test',
        'test_title': 'test_title',
        'auto_create_context': 'auto_create_context',
        'push_to_jira': 'push_to_jira',
        'close_old_findings': 'close_old_findings',
        'version': 'version',
        'build_id': 'build_id',
        'branch_tag': 'branch_tag',
        'commit_hash': 'commit_hash',
        'api_scan_configuration': 'api_scan_configuration',
        'service': 'service',
        'environment': 'environment',
        'lead': 'lead',
        'tags': 'tags',
        'group_by': 'group_by',
        'test_id': 'test_id',
        'engagement_id': 'engagement_id',
        'product_id': 'product_id',
        'product_type_id': 'product_type_id',
        'statistics': 'statistics'
    }

    def __init__(self, scan_date=None, minimum_severity='Info', active=True, verified=True, scan_type=None, endpoint_to_add=None, file=None, product_type_name=None, product_name=None, engagement_name=None, test=None, test_title=None, auto_create_context=None, push_to_jira=False, close_old_findings=True, version=None, build_id=None, branch_tag=None, commit_hash=None, api_scan_configuration=None, service=None, environment=None, lead=None, tags=None, group_by=None, test_id=None, engagement_id=None, product_id=None, product_type_id=None, statistics=None, local_vars_configuration=None):  # noqa: E501
        """ReImportScan - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._scan_date = None
        self._minimum_severity = None
        self._active = None
        self._verified = None
        self._scan_type = None
        self._endpoint_to_add = None
        self._file = None
        self._product_type_name = None
        self._product_name = None
        self._engagement_name = None
        self._test = None
        self._test_title = None
        self._auto_create_context = None
        self._push_to_jira = None
        self._close_old_findings = None
        self._version = None
        self._build_id = None
        self._branch_tag = None
        self._commit_hash = None
        self._api_scan_configuration = None
        self._service = None
        self._environment = None
        self._lead = None
        self._tags = None
        self._group_by = None
        self._test_id = None
        self._engagement_id = None
        self._product_id = None
        self._product_type_id = None
        self._statistics = None
        self.discriminator = None

        if scan_date is not None:
            self.scan_date = scan_date
        if minimum_severity is not None:
            self.minimum_severity = minimum_severity
        if active is not None:
            self.active = active
        if verified is not None:
            self.verified = verified
        self.scan_type = scan_type
        if endpoint_to_add is not None:
            self.endpoint_to_add = endpoint_to_add
        if file is not None:
            self.file = file
        if product_type_name is not None:
            self.product_type_name = product_type_name
        if product_name is not None:
            self.product_name = product_name
        if engagement_name is not None:
            self.engagement_name = engagement_name
        if test is not None:
            self.test = test
        if test_title is not None:
            self.test_title = test_title
        if auto_create_context is not None:
            self.auto_create_context = auto_create_context
        if push_to_jira is not None:
            self.push_to_jira = push_to_jira
        if close_old_findings is not None:
            self.close_old_findings = close_old_findings
        if version is not None:
            self.version = version
        if build_id is not None:
            self.build_id = build_id
        if branch_tag is not None:
            self.branch_tag = branch_tag
        if commit_hash is not None:
            self.commit_hash = commit_hash
        self.api_scan_configuration = api_scan_configuration
        if service is not None:
            self.service = service
        if environment is not None:
            self.environment = environment
        self.lead = lead
        if tags is not None:
            self.tags = tags
        if group_by is not None:
            self.group_by = group_by
        if test_id is not None:
            self.test_id = test_id
        if engagement_id is not None:
            self.engagement_id = engagement_id
        if product_id is not None:
            self.product_id = product_id
        if product_type_id is not None:
            self.product_type_id = product_type_id
        if statistics is not None:
            self.statistics = statistics

    @property
    def scan_date(self):
        """Gets the scan_date of this ReImportScan.  # noqa: E501


        :return: The scan_date of this ReImportScan.  # noqa: E501
        :rtype: date
        """
        return self._scan_date

    @scan_date.setter
    def scan_date(self, scan_date):
        """Sets the scan_date of this ReImportScan.


        :param scan_date: The scan_date of this ReImportScan.  # noqa: E501
        :type: date
        """

        self._scan_date = scan_date

    @property
    def minimum_severity(self):
        """Gets the minimum_severity of this ReImportScan.  # noqa: E501


        :return: The minimum_severity of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._minimum_severity

    @minimum_severity.setter
    def minimum_severity(self, minimum_severity):
        """Sets the minimum_severity of this ReImportScan.


        :param minimum_severity: The minimum_severity of this ReImportScan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Info", "Low", "Medium", "High", "Critical"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and minimum_severity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `minimum_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(minimum_severity, allowed_values)
            )

        self._minimum_severity = minimum_severity

    @property
    def active(self):
        """Gets the active of this ReImportScan.  # noqa: E501


        :return: The active of this ReImportScan.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ReImportScan.


        :param active: The active of this ReImportScan.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def verified(self):
        """Gets the verified of this ReImportScan.  # noqa: E501


        :return: The verified of this ReImportScan.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this ReImportScan.


        :param verified: The verified of this ReImportScan.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def scan_type(self):
        """Gets the scan_type of this ReImportScan.  # noqa: E501


        :return: The scan_type of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._scan_type

    @scan_type.setter
    def scan_type(self, scan_type):
        """Sets the scan_type of this ReImportScan.


        :param scan_type: The scan_type of this ReImportScan.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and scan_type is None:  # noqa: E501
            raise ValueError("Invalid value for `scan_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Acunetix Scan", "Acunetix360 Scan", "Anchore Engine Scan", "Anchore Enterprise Policy Check", "Anchore Grype", "AppSpider Scan", "Aqua Scan", "Arachni Scan", "AuditJS Scan", "AWS Prowler Scan", "AWS Scout2 Scan", "AWS Security Hub Scan", "Azure Security Center Recommendations Scan", "Bandit Scan", "Blackduck Component Risk", "Blackduck Hub Scan", "Brakeman Scan", "BugCrowd Scan", "Bundler-Audit Scan", "Burp Enterprise Scan", "Burp GraphQL API", "Burp REST API", "Burp Scan", "CargoAudit Scan", "Checkmarx OSA", "Checkmarx Scan", "Checkmarx Scan detailed", "Checkov Scan", "Clair Klar Scan", "Clair Scan", "Cloudsploit Scan", "Cobalt.io API Import", "Cobalt.io Scan", "Contrast Scan", "Coverity API", "Crashtest Security JSON File", "Crashtest Security XML File", "CredScan Scan", "CycloneDX Scan", "DawnScanner Scan", "Dependency Check Scan", "Dependency Track Finding Packaging Format (FPF) Export", "Detect-secrets Scan", "Dockle Scan", "DrHeader JSON Importer", "DSOP Scan", "Edgescan Scan", "ESLint Scan", "Fortify Scan", "Generic Findings Import", "Github Vulnerability Scan", "GitLab API Fuzzing Report Scan", "GitLab Container Scan", "GitLab DAST Report", "GitLab Dependency Scanning Report", "GitLab SAST Report", "GitLab Secret Detection Report", "Gitleaks Scan", "Gosec Scanner", "HackerOne Cases", "Hadolint Dockerfile check", "Harbor Vulnerability Scan", "Horusec Scan", "HuskyCI Report", "Hydra Scan", "IBM AppScan DAST", "Immuniweb Scan", "IntSights Report", "JFrog Xray Scan", "JFrog Xray Unified Scan", "KICS Scan", "Kiuwan Scan", "kube-bench Scan", "Meterian Scan", "Microfocus Webinspect Scan", "MobSF Scan", "Mobsfscan Scan", "Mozilla Observatory Scan", "Nessus Scan", "Nessus WAS Scan", "Netsparker Scan", "Nexpose Scan", "Nikto Scan", "Nmap Scan", "Node Security Platform Scan", "NPM Audit Scan", "Nuclei Scan", "Openscap Vulnerability Scan", "OpenVAS CSV", "ORT evaluated model Importer", "OssIndex Devaudit SCA Scan Importer", "Outpost24 Scan", "PHP Security Audit v2", "PHP Symfony Security Check", "pip-audit Scan", "PMD Scan", "Qualys Infrastructure Scan (WebGUI XML)", "Qualys Scan", "Qualys Webapp Scan", "Retire.js Scan", "Risk Recon API Importer", "Rubocop Scan", "Rusty Hog Scan", "SARIF", "Scantist Scan", "Scout Suite Scan", "Semgrep JSON Report", "SKF Scan", "Snyk Scan", "Solar Appscreener Scan", "SonarQube API Import", "SonarQube Scan", "SonarQube Scan detailed", "Sonatype Application Scan", "SpotBugs Scan", "SSL Labs Scan", "Sslscan", "Sslyze Scan", "SSLyze Scan (JSON)", "StackHawk HawkScan", "Terrascan Scan", "Testssl Scan", "TFSec Scan", "Trivy Scan", "Trufflehog Scan", "Trufflehog3 Scan", "Trustwave Fusion API Scan", "Trustwave Scan (CSV)", "Twistlock Image Scan", "VCG Scan", "Veracode Scan", "Wapiti Scan", "WFuzz JSON report", "WhiteHat Sentinel", "Whitesource Scan", "Wpscan", "Xanitizer Scan", "Yarn Audit Scan", "ZAP Scan"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and scan_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `scan_type` ({0}), must be one of {1}"  # noqa: E501
                .format(scan_type, allowed_values)
            )

        self._scan_type = scan_type

    @property
    def endpoint_to_add(self):
        """Gets the endpoint_to_add of this ReImportScan.  # noqa: E501


        :return: The endpoint_to_add of this ReImportScan.  # noqa: E501
        :rtype: int
        """
        return self._endpoint_to_add

    @endpoint_to_add.setter
    def endpoint_to_add(self, endpoint_to_add):
        """Sets the endpoint_to_add of this ReImportScan.


        :param endpoint_to_add: The endpoint_to_add of this ReImportScan.  # noqa: E501
        :type: int
        """

        self._endpoint_to_add = endpoint_to_add

    @property
    def file(self):
        """Gets the file of this ReImportScan.  # noqa: E501


        :return: The file of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ReImportScan.


        :param file: The file of this ReImportScan.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def product_type_name(self):
        """Gets the product_type_name of this ReImportScan.  # noqa: E501


        :return: The product_type_name of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._product_type_name

    @product_type_name.setter
    def product_type_name(self, product_type_name):
        """Sets the product_type_name of this ReImportScan.


        :param product_type_name: The product_type_name of this ReImportScan.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                product_type_name is not None and len(product_type_name) < 1):
            raise ValueError("Invalid value for `product_type_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._product_type_name = product_type_name

    @property
    def product_name(self):
        """Gets the product_name of this ReImportScan.  # noqa: E501


        :return: The product_name of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ReImportScan.


        :param product_name: The product_name of this ReImportScan.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                product_name is not None and len(product_name) < 1):
            raise ValueError("Invalid value for `product_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._product_name = product_name

    @property
    def engagement_name(self):
        """Gets the engagement_name of this ReImportScan.  # noqa: E501


        :return: The engagement_name of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._engagement_name

    @engagement_name.setter
    def engagement_name(self, engagement_name):
        """Sets the engagement_name of this ReImportScan.


        :param engagement_name: The engagement_name of this ReImportScan.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                engagement_name is not None and len(engagement_name) < 1):
            raise ValueError("Invalid value for `engagement_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._engagement_name = engagement_name

    @property
    def test(self):
        """Gets the test of this ReImportScan.  # noqa: E501


        :return: The test of this ReImportScan.  # noqa: E501
        :rtype: int
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this ReImportScan.


        :param test: The test of this ReImportScan.  # noqa: E501
        :type: int
        """

        self._test = test

    @property
    def test_title(self):
        """Gets the test_title of this ReImportScan.  # noqa: E501


        :return: The test_title of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._test_title

    @test_title.setter
    def test_title(self, test_title):
        """Sets the test_title of this ReImportScan.


        :param test_title: The test_title of this ReImportScan.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                test_title is not None and len(test_title) < 1):
            raise ValueError("Invalid value for `test_title`, length must be greater than or equal to `1`")  # noqa: E501

        self._test_title = test_title

    @property
    def auto_create_context(self):
        """Gets the auto_create_context of this ReImportScan.  # noqa: E501


        :return: The auto_create_context of this ReImportScan.  # noqa: E501
        :rtype: bool
        """
        return self._auto_create_context

    @auto_create_context.setter
    def auto_create_context(self, auto_create_context):
        """Sets the auto_create_context of this ReImportScan.


        :param auto_create_context: The auto_create_context of this ReImportScan.  # noqa: E501
        :type: bool
        """

        self._auto_create_context = auto_create_context

    @property
    def push_to_jira(self):
        """Gets the push_to_jira of this ReImportScan.  # noqa: E501


        :return: The push_to_jira of this ReImportScan.  # noqa: E501
        :rtype: bool
        """
        return self._push_to_jira

    @push_to_jira.setter
    def push_to_jira(self, push_to_jira):
        """Sets the push_to_jira of this ReImportScan.


        :param push_to_jira: The push_to_jira of this ReImportScan.  # noqa: E501
        :type: bool
        """

        self._push_to_jira = push_to_jira

    @property
    def close_old_findings(self):
        """Gets the close_old_findings of this ReImportScan.  # noqa: E501


        :return: The close_old_findings of this ReImportScan.  # noqa: E501
        :rtype: bool
        """
        return self._close_old_findings

    @close_old_findings.setter
    def close_old_findings(self, close_old_findings):
        """Sets the close_old_findings of this ReImportScan.


        :param close_old_findings: The close_old_findings of this ReImportScan.  # noqa: E501
        :type: bool
        """

        self._close_old_findings = close_old_findings

    @property
    def version(self):
        """Gets the version of this ReImportScan.  # noqa: E501


        :return: The version of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReImportScan.


        :param version: The version of this ReImportScan.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) < 1):
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version

    @property
    def build_id(self):
        """Gets the build_id of this ReImportScan.  # noqa: E501


        :return: The build_id of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this ReImportScan.


        :param build_id: The build_id of this ReImportScan.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                build_id is not None and len(build_id) < 1):
            raise ValueError("Invalid value for `build_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._build_id = build_id

    @property
    def branch_tag(self):
        """Gets the branch_tag of this ReImportScan.  # noqa: E501


        :return: The branch_tag of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._branch_tag

    @branch_tag.setter
    def branch_tag(self, branch_tag):
        """Sets the branch_tag of this ReImportScan.


        :param branch_tag: The branch_tag of this ReImportScan.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                branch_tag is not None and len(branch_tag) < 1):
            raise ValueError("Invalid value for `branch_tag`, length must be greater than or equal to `1`")  # noqa: E501

        self._branch_tag = branch_tag

    @property
    def commit_hash(self):
        """Gets the commit_hash of this ReImportScan.  # noqa: E501


        :return: The commit_hash of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._commit_hash

    @commit_hash.setter
    def commit_hash(self, commit_hash):
        """Sets the commit_hash of this ReImportScan.


        :param commit_hash: The commit_hash of this ReImportScan.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                commit_hash is not None and len(commit_hash) < 1):
            raise ValueError("Invalid value for `commit_hash`, length must be greater than or equal to `1`")  # noqa: E501

        self._commit_hash = commit_hash

    @property
    def api_scan_configuration(self):
        """Gets the api_scan_configuration of this ReImportScan.  # noqa: E501


        :return: The api_scan_configuration of this ReImportScan.  # noqa: E501
        :rtype: int
        """
        return self._api_scan_configuration

    @api_scan_configuration.setter
    def api_scan_configuration(self, api_scan_configuration):
        """Sets the api_scan_configuration of this ReImportScan.


        :param api_scan_configuration: The api_scan_configuration of this ReImportScan.  # noqa: E501
        :type: int
        """

        self._api_scan_configuration = api_scan_configuration

    @property
    def service(self):
        """Gets the service of this ReImportScan.  # noqa: E501

        A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.  # noqa: E501

        :return: The service of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ReImportScan.

        A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.  # noqa: E501

        :param service: The service of this ReImportScan.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                service is not None and len(service) < 1):
            raise ValueError("Invalid value for `service`, length must be greater than or equal to `1`")  # noqa: E501

        self._service = service

    @property
    def environment(self):
        """Gets the environment of this ReImportScan.  # noqa: E501


        :return: The environment of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ReImportScan.


        :param environment: The environment of this ReImportScan.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                environment is not None and len(environment) < 1):
            raise ValueError("Invalid value for `environment`, length must be greater than or equal to `1`")  # noqa: E501

        self._environment = environment

    @property
    def lead(self):
        """Gets the lead of this ReImportScan.  # noqa: E501


        :return: The lead of this ReImportScan.  # noqa: E501
        :rtype: int
        """
        return self._lead

    @lead.setter
    def lead(self, lead):
        """Sets the lead of this ReImportScan.


        :param lead: The lead of this ReImportScan.  # noqa: E501
        :type: int
        """

        self._lead = lead

    @property
    def tags(self):
        """Gets the tags of this ReImportScan.  # noqa: E501


        :return: The tags of this ReImportScan.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ReImportScan.


        :param tags: The tags of this ReImportScan.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def group_by(self):
        """Gets the group_by of this ReImportScan.  # noqa: E501

        Choose an option to automatically group new findings by the chosen option.  # noqa: E501

        :return: The group_by of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this ReImportScan.

        Choose an option to automatically group new findings by the chosen option.  # noqa: E501

        :param group_by: The group_by of this ReImportScan.  # noqa: E501
        :type: str
        """
        allowed_values = ["component_name", "component_name+component_version", "file_path"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and group_by not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `group_by` ({0}), must be one of {1}"  # noqa: E501
                .format(group_by, allowed_values)
            )

        self._group_by = group_by

    @property
    def test_id(self):
        """Gets the test_id of this ReImportScan.  # noqa: E501


        :return: The test_id of this ReImportScan.  # noqa: E501
        :rtype: int
        """
        return self._test_id

    @test_id.setter
    def test_id(self, test_id):
        """Sets the test_id of this ReImportScan.


        :param test_id: The test_id of this ReImportScan.  # noqa: E501
        :type: int
        """

        self._test_id = test_id

    @property
    def engagement_id(self):
        """Gets the engagement_id of this ReImportScan.  # noqa: E501


        :return: The engagement_id of this ReImportScan.  # noqa: E501
        :rtype: int
        """
        return self._engagement_id

    @engagement_id.setter
    def engagement_id(self, engagement_id):
        """Sets the engagement_id of this ReImportScan.


        :param engagement_id: The engagement_id of this ReImportScan.  # noqa: E501
        :type: int
        """

        self._engagement_id = engagement_id

    @property
    def product_id(self):
        """Gets the product_id of this ReImportScan.  # noqa: E501


        :return: The product_id of this ReImportScan.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ReImportScan.


        :param product_id: The product_id of this ReImportScan.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def product_type_id(self):
        """Gets the product_type_id of this ReImportScan.  # noqa: E501


        :return: The product_type_id of this ReImportScan.  # noqa: E501
        :rtype: int
        """
        return self._product_type_id

    @product_type_id.setter
    def product_type_id(self, product_type_id):
        """Sets the product_type_id of this ReImportScan.


        :param product_type_id: The product_type_id of this ReImportScan.  # noqa: E501
        :type: int
        """

        self._product_type_id = product_type_id

    @property
    def statistics(self):
        """Gets the statistics of this ReImportScan.  # noqa: E501


        :return: The statistics of this ReImportScan.  # noqa: E501
        :rtype: ImportStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this ReImportScan.


        :param statistics: The statistics of this ReImportScan.  # noqa: E501
        :type: ImportStatistics
        """

        self._statistics = statistics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReImportScan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReImportScan):
            return True

        return self.to_dict() != other.to_dict()
