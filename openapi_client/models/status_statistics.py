# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class StatusStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'int',
        'verified': 'int',
        'duplicate': 'int',
        'false_p': 'int',
        'out_of_scope': 'int',
        'is_mitigated': 'int',
        'risk_accepted': 'int',
        'total': 'int'
    }

    attribute_map = {
        'active': 'active',
        'verified': 'verified',
        'duplicate': 'duplicate',
        'false_p': 'false_p',
        'out_of_scope': 'out_of_scope',
        'is_mitigated': 'is_mitigated',
        'risk_accepted': 'risk_accepted',
        'total': 'total'
    }

    def __init__(self, active=None, verified=None, duplicate=None, false_p=None, out_of_scope=None, is_mitigated=None, risk_accepted=None, total=None, local_vars_configuration=None):  # noqa: E501
        """StatusStatistics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._verified = None
        self._duplicate = None
        self._false_p = None
        self._out_of_scope = None
        self._is_mitigated = None
        self._risk_accepted = None
        self._total = None
        self.discriminator = None

        self.active = active
        self.verified = verified
        self.duplicate = duplicate
        self.false_p = false_p
        self.out_of_scope = out_of_scope
        self.is_mitigated = is_mitigated
        self.risk_accepted = risk_accepted
        self.total = total

    @property
    def active(self):
        """Gets the active of this StatusStatistics.  # noqa: E501


        :return: The active of this StatusStatistics.  # noqa: E501
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this StatusStatistics.


        :param active: The active of this StatusStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and active is None:  # noqa: E501
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def verified(self):
        """Gets the verified of this StatusStatistics.  # noqa: E501


        :return: The verified of this StatusStatistics.  # noqa: E501
        :rtype: int
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this StatusStatistics.


        :param verified: The verified of this StatusStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and verified is None:  # noqa: E501
            raise ValueError("Invalid value for `verified`, must not be `None`")  # noqa: E501

        self._verified = verified

    @property
    def duplicate(self):
        """Gets the duplicate of this StatusStatistics.  # noqa: E501


        :return: The duplicate of this StatusStatistics.  # noqa: E501
        :rtype: int
        """
        return self._duplicate

    @duplicate.setter
    def duplicate(self, duplicate):
        """Sets the duplicate of this StatusStatistics.


        :param duplicate: The duplicate of this StatusStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and duplicate is None:  # noqa: E501
            raise ValueError("Invalid value for `duplicate`, must not be `None`")  # noqa: E501

        self._duplicate = duplicate

    @property
    def false_p(self):
        """Gets the false_p of this StatusStatistics.  # noqa: E501


        :return: The false_p of this StatusStatistics.  # noqa: E501
        :rtype: int
        """
        return self._false_p

    @false_p.setter
    def false_p(self, false_p):
        """Sets the false_p of this StatusStatistics.


        :param false_p: The false_p of this StatusStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and false_p is None:  # noqa: E501
            raise ValueError("Invalid value for `false_p`, must not be `None`")  # noqa: E501

        self._false_p = false_p

    @property
    def out_of_scope(self):
        """Gets the out_of_scope of this StatusStatistics.  # noqa: E501


        :return: The out_of_scope of this StatusStatistics.  # noqa: E501
        :rtype: int
        """
        return self._out_of_scope

    @out_of_scope.setter
    def out_of_scope(self, out_of_scope):
        """Sets the out_of_scope of this StatusStatistics.


        :param out_of_scope: The out_of_scope of this StatusStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and out_of_scope is None:  # noqa: E501
            raise ValueError("Invalid value for `out_of_scope`, must not be `None`")  # noqa: E501

        self._out_of_scope = out_of_scope

    @property
    def is_mitigated(self):
        """Gets the is_mitigated of this StatusStatistics.  # noqa: E501


        :return: The is_mitigated of this StatusStatistics.  # noqa: E501
        :rtype: int
        """
        return self._is_mitigated

    @is_mitigated.setter
    def is_mitigated(self, is_mitigated):
        """Sets the is_mitigated of this StatusStatistics.


        :param is_mitigated: The is_mitigated of this StatusStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and is_mitigated is None:  # noqa: E501
            raise ValueError("Invalid value for `is_mitigated`, must not be `None`")  # noqa: E501

        self._is_mitigated = is_mitigated

    @property
    def risk_accepted(self):
        """Gets the risk_accepted of this StatusStatistics.  # noqa: E501


        :return: The risk_accepted of this StatusStatistics.  # noqa: E501
        :rtype: int
        """
        return self._risk_accepted

    @risk_accepted.setter
    def risk_accepted(self, risk_accepted):
        """Sets the risk_accepted of this StatusStatistics.


        :param risk_accepted: The risk_accepted of this StatusStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and risk_accepted is None:  # noqa: E501
            raise ValueError("Invalid value for `risk_accepted`, must not be `None`")  # noqa: E501

        self._risk_accepted = risk_accepted

    @property
    def total(self):
        """Gets the total of this StatusStatistics.  # noqa: E501


        :return: The total of this StatusStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this StatusStatistics.


        :param total: The total of this StatusStatistics.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total is None:  # noqa: E501
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatusStatistics):
            return True

        return self.to_dict() != other.to_dict()
