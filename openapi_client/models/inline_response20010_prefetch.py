# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse20010Prefetch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'defect_review_requested_by': 'dict(str, UserStub)',
        'duplicate_finding': 'dict(str, Finding)',
        'endpoint_status': 'dict(str, EndpointStatus)',
        'endpoints': 'dict(str, Endpoint)',
        'files': 'dict(str, File)',
        'finding_group_set': 'dict(str, FindingGroup)',
        'found_by': 'dict(str, TestType)',
        'last_reviewed_by': 'dict(str, UserStub)',
        'mitigated_by': 'dict(str, UserStub)',
        'notes': 'dict(str, Note)',
        'reporter': 'dict(str, UserStub)',
        'review_requested_by': 'dict(str, UserStub)',
        'reviewers': 'dict(str, UserStub)',
        'risk_acceptance_set': 'dict(str, RiskAcceptance)',
        'sonarqube_issue': 'dict(str, SonarqubeIssue)',
        'test': 'dict(str, Test)',
        'test_import_set': 'dict(str, TestImport)'
    }

    attribute_map = {
        'defect_review_requested_by': 'defect_review_requested_by',
        'duplicate_finding': 'duplicate_finding',
        'endpoint_status': 'endpoint_status',
        'endpoints': 'endpoints',
        'files': 'files',
        'finding_group_set': 'finding_group_set',
        'found_by': 'found_by',
        'last_reviewed_by': 'last_reviewed_by',
        'mitigated_by': 'mitigated_by',
        'notes': 'notes',
        'reporter': 'reporter',
        'review_requested_by': 'review_requested_by',
        'reviewers': 'reviewers',
        'risk_acceptance_set': 'risk_acceptance_set',
        'sonarqube_issue': 'sonarqube_issue',
        'test': 'test',
        'test_import_set': 'test_import_set'
    }

    def __init__(self, defect_review_requested_by=None, duplicate_finding=None, endpoint_status=None, endpoints=None, files=None, finding_group_set=None, found_by=None, last_reviewed_by=None, mitigated_by=None, notes=None, reporter=None, review_requested_by=None, reviewers=None, risk_acceptance_set=None, sonarqube_issue=None, test=None, test_import_set=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20010Prefetch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._defect_review_requested_by = None
        self._duplicate_finding = None
        self._endpoint_status = None
        self._endpoints = None
        self._files = None
        self._finding_group_set = None
        self._found_by = None
        self._last_reviewed_by = None
        self._mitigated_by = None
        self._notes = None
        self._reporter = None
        self._review_requested_by = None
        self._reviewers = None
        self._risk_acceptance_set = None
        self._sonarqube_issue = None
        self._test = None
        self._test_import_set = None
        self.discriminator = None

        if defect_review_requested_by is not None:
            self.defect_review_requested_by = defect_review_requested_by
        if duplicate_finding is not None:
            self.duplicate_finding = duplicate_finding
        if endpoint_status is not None:
            self.endpoint_status = endpoint_status
        if endpoints is not None:
            self.endpoints = endpoints
        if files is not None:
            self.files = files
        if finding_group_set is not None:
            self.finding_group_set = finding_group_set
        if found_by is not None:
            self.found_by = found_by
        if last_reviewed_by is not None:
            self.last_reviewed_by = last_reviewed_by
        if mitigated_by is not None:
            self.mitigated_by = mitigated_by
        if notes is not None:
            self.notes = notes
        if reporter is not None:
            self.reporter = reporter
        if review_requested_by is not None:
            self.review_requested_by = review_requested_by
        if reviewers is not None:
            self.reviewers = reviewers
        if risk_acceptance_set is not None:
            self.risk_acceptance_set = risk_acceptance_set
        if sonarqube_issue is not None:
            self.sonarqube_issue = sonarqube_issue
        if test is not None:
            self.test = test
        if test_import_set is not None:
            self.test_import_set = test_import_set

    @property
    def defect_review_requested_by(self):
        """Gets the defect_review_requested_by of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The defect_review_requested_by of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, UserStub)
        """
        return self._defect_review_requested_by

    @defect_review_requested_by.setter
    def defect_review_requested_by(self, defect_review_requested_by):
        """Sets the defect_review_requested_by of this InlineResponse20010Prefetch.


        :param defect_review_requested_by: The defect_review_requested_by of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, UserStub)
        """

        self._defect_review_requested_by = defect_review_requested_by

    @property
    def duplicate_finding(self):
        """Gets the duplicate_finding of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The duplicate_finding of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, Finding)
        """
        return self._duplicate_finding

    @duplicate_finding.setter
    def duplicate_finding(self, duplicate_finding):
        """Sets the duplicate_finding of this InlineResponse20010Prefetch.


        :param duplicate_finding: The duplicate_finding of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, Finding)
        """

        self._duplicate_finding = duplicate_finding

    @property
    def endpoint_status(self):
        """Gets the endpoint_status of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The endpoint_status of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, EndpointStatus)
        """
        return self._endpoint_status

    @endpoint_status.setter
    def endpoint_status(self, endpoint_status):
        """Sets the endpoint_status of this InlineResponse20010Prefetch.


        :param endpoint_status: The endpoint_status of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, EndpointStatus)
        """

        self._endpoint_status = endpoint_status

    @property
    def endpoints(self):
        """Gets the endpoints of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The endpoints of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, Endpoint)
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this InlineResponse20010Prefetch.


        :param endpoints: The endpoints of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, Endpoint)
        """

        self._endpoints = endpoints

    @property
    def files(self):
        """Gets the files of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The files of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, File)
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this InlineResponse20010Prefetch.


        :param files: The files of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, File)
        """

        self._files = files

    @property
    def finding_group_set(self):
        """Gets the finding_group_set of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The finding_group_set of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, FindingGroup)
        """
        return self._finding_group_set

    @finding_group_set.setter
    def finding_group_set(self, finding_group_set):
        """Sets the finding_group_set of this InlineResponse20010Prefetch.


        :param finding_group_set: The finding_group_set of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, FindingGroup)
        """

        self._finding_group_set = finding_group_set

    @property
    def found_by(self):
        """Gets the found_by of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The found_by of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, TestType)
        """
        return self._found_by

    @found_by.setter
    def found_by(self, found_by):
        """Sets the found_by of this InlineResponse20010Prefetch.


        :param found_by: The found_by of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, TestType)
        """

        self._found_by = found_by

    @property
    def last_reviewed_by(self):
        """Gets the last_reviewed_by of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The last_reviewed_by of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, UserStub)
        """
        return self._last_reviewed_by

    @last_reviewed_by.setter
    def last_reviewed_by(self, last_reviewed_by):
        """Sets the last_reviewed_by of this InlineResponse20010Prefetch.


        :param last_reviewed_by: The last_reviewed_by of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, UserStub)
        """

        self._last_reviewed_by = last_reviewed_by

    @property
    def mitigated_by(self):
        """Gets the mitigated_by of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The mitigated_by of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, UserStub)
        """
        return self._mitigated_by

    @mitigated_by.setter
    def mitigated_by(self, mitigated_by):
        """Sets the mitigated_by of this InlineResponse20010Prefetch.


        :param mitigated_by: The mitigated_by of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, UserStub)
        """

        self._mitigated_by = mitigated_by

    @property
    def notes(self):
        """Gets the notes of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The notes of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, Note)
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this InlineResponse20010Prefetch.


        :param notes: The notes of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, Note)
        """

        self._notes = notes

    @property
    def reporter(self):
        """Gets the reporter of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The reporter of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, UserStub)
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this InlineResponse20010Prefetch.


        :param reporter: The reporter of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, UserStub)
        """

        self._reporter = reporter

    @property
    def review_requested_by(self):
        """Gets the review_requested_by of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The review_requested_by of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, UserStub)
        """
        return self._review_requested_by

    @review_requested_by.setter
    def review_requested_by(self, review_requested_by):
        """Sets the review_requested_by of this InlineResponse20010Prefetch.


        :param review_requested_by: The review_requested_by of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, UserStub)
        """

        self._review_requested_by = review_requested_by

    @property
    def reviewers(self):
        """Gets the reviewers of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The reviewers of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, UserStub)
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers):
        """Sets the reviewers of this InlineResponse20010Prefetch.


        :param reviewers: The reviewers of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, UserStub)
        """

        self._reviewers = reviewers

    @property
    def risk_acceptance_set(self):
        """Gets the risk_acceptance_set of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The risk_acceptance_set of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, RiskAcceptance)
        """
        return self._risk_acceptance_set

    @risk_acceptance_set.setter
    def risk_acceptance_set(self, risk_acceptance_set):
        """Sets the risk_acceptance_set of this InlineResponse20010Prefetch.


        :param risk_acceptance_set: The risk_acceptance_set of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, RiskAcceptance)
        """

        self._risk_acceptance_set = risk_acceptance_set

    @property
    def sonarqube_issue(self):
        """Gets the sonarqube_issue of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The sonarqube_issue of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, SonarqubeIssue)
        """
        return self._sonarqube_issue

    @sonarqube_issue.setter
    def sonarqube_issue(self, sonarqube_issue):
        """Sets the sonarqube_issue of this InlineResponse20010Prefetch.


        :param sonarqube_issue: The sonarqube_issue of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, SonarqubeIssue)
        """

        self._sonarqube_issue = sonarqube_issue

    @property
    def test(self):
        """Gets the test of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The test of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, Test)
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this InlineResponse20010Prefetch.


        :param test: The test of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, Test)
        """

        self._test = test

    @property
    def test_import_set(self):
        """Gets the test_import_set of this InlineResponse20010Prefetch.  # noqa: E501


        :return: The test_import_set of this InlineResponse20010Prefetch.  # noqa: E501
        :rtype: dict(str, TestImport)
        """
        return self._test_import_set

    @test_import_set.setter
    def test_import_set(self, test_import_set):
        """Sets the test_import_set of this InlineResponse20010Prefetch.


        :param test_import_set: The test_import_set of this InlineResponse20010Prefetch.  # noqa: E501
        :type: dict(str, TestImport)
        """

        self._test_import_set = test_import_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20010Prefetch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20010Prefetch):
            return True

        return self.to_dict() != other.to_dict()
