# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Regulation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'acronym': 'str',
        'category': 'str',
        'jurisdiction': 'str',
        'description': 'str',
        'reference': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'acronym': 'acronym',
        'category': 'category',
        'jurisdiction': 'jurisdiction',
        'description': 'description',
        'reference': 'reference'
    }

    def __init__(self, id=None, name=None, acronym=None, category=None, jurisdiction=None, description=None, reference=None, local_vars_configuration=None):  # noqa: E501
        """Regulation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._acronym = None
        self._category = None
        self._jurisdiction = None
        self._description = None
        self._reference = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.acronym = acronym
        self.category = category
        self.jurisdiction = jurisdiction
        if description is not None:
            self.description = description
        if reference is not None:
            self.reference = reference

    @property
    def id(self):
        """Gets the id of this Regulation.  # noqa: E501


        :return: The id of this Regulation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Regulation.


        :param id: The id of this Regulation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Regulation.  # noqa: E501

        The name of the regulation.  # noqa: E501

        :return: The name of this Regulation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Regulation.

        The name of the regulation.  # noqa: E501

        :param name: The name of this Regulation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def acronym(self):
        """Gets the acronym of this Regulation.  # noqa: E501

        A shortened representation of the name.  # noqa: E501

        :return: The acronym of this Regulation.  # noqa: E501
        :rtype: str
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym):
        """Sets the acronym of this Regulation.

        A shortened representation of the name.  # noqa: E501

        :param acronym: The acronym of this Regulation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and acronym is None:  # noqa: E501
            raise ValueError("Invalid value for `acronym`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                acronym is not None and len(acronym) > 20):
            raise ValueError("Invalid value for `acronym`, length must be less than or equal to `20`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                acronym is not None and len(acronym) < 1):
            raise ValueError("Invalid value for `acronym`, length must be greater than or equal to `1`")  # noqa: E501

        self._acronym = acronym

    @property
    def category(self):
        """Gets the category of this Regulation.  # noqa: E501

        The subject of the regulation.  # noqa: E501

        :return: The category of this Regulation.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Regulation.

        The subject of the regulation.  # noqa: E501

        :param category: The category of this Regulation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and category is None:  # noqa: E501
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501
        allowed_values = ["privacy", "finance", "education", "medical", "corporate", "other"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this Regulation.  # noqa: E501

        The territory over which the regulation applies.  # noqa: E501

        :return: The jurisdiction of this Regulation.  # noqa: E501
        :rtype: str
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this Regulation.

        The territory over which the regulation applies.  # noqa: E501

        :param jurisdiction: The jurisdiction of this Regulation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and jurisdiction is None:  # noqa: E501
            raise ValueError("Invalid value for `jurisdiction`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                jurisdiction is not None and len(jurisdiction) > 64):
            raise ValueError("Invalid value for `jurisdiction`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                jurisdiction is not None and len(jurisdiction) < 1):
            raise ValueError("Invalid value for `jurisdiction`, length must be greater than or equal to `1`")  # noqa: E501

        self._jurisdiction = jurisdiction

    @property
    def description(self):
        """Gets the description of this Regulation.  # noqa: E501

        Information about the regulation's purpose.  # noqa: E501

        :return: The description of this Regulation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Regulation.

        Information about the regulation's purpose.  # noqa: E501

        :param description: The description of this Regulation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def reference(self):
        """Gets the reference of this Regulation.  # noqa: E501

        An external URL for more information.  # noqa: E501

        :return: The reference of this Regulation.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Regulation.

        An external URL for more information.  # noqa: E501

        :param reference: The reference of this Regulation.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                reference is not None and len(reference) > 200):
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `200`")  # noqa: E501

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Regulation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Regulation):
            return True

        return self.to_dict() != other.to_dict()
