# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SystemSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'enable_auditlog': 'bool',
        'enable_deduplication': 'bool',
        'delete_duplicates': 'bool',
        'max_dupes': 'int',
        'email_from': 'str',
        'enable_jira': 'bool',
        'enable_jira_web_hook': 'bool',
        'disable_jira_webhook_secret': 'bool',
        'jira_webhook_secret': 'str',
        'jira_minimum_severity': 'str',
        'jira_labels': 'str',
        'enable_github': 'bool',
        'enable_slack_notifications': 'bool',
        'slack_channel': 'str',
        'slack_token': 'str',
        'slack_username': 'str',
        'enable_msteams_notifications': 'bool',
        'msteams_url': 'str',
        'enable_mail_notifications': 'bool',
        'mail_notifications_to': 'str',
        'false_positive_history': 'bool',
        'url_prefix': 'str',
        'team_name': 'str',
        'time_zone': 'str',
        'enable_product_grade': 'bool',
        'product_grade': 'str',
        'product_grade_a': 'int',
        'product_grade_b': 'int',
        'product_grade_c': 'int',
        'product_grade_d': 'int',
        'product_grade_f': 'int',
        'enable_benchmark': 'bool',
        'enable_template_match': 'bool',
        'engagement_auto_close': 'bool',
        'engagement_auto_close_days': 'int',
        'enable_finding_sla': 'bool',
        'sla_critical': 'int',
        'sla_high': 'int',
        'sla_medium': 'int',
        'sla_low': 'int',
        'allow_anonymous_survey_repsonse': 'bool',
        'credentials': 'str',
        'disclaimer': 'str',
        'column_widths': 'str',
        'drive_folder_id': 'str',
        'email_address': 'str',
        'risk_acceptance_form_default_days': 'int',
        'risk_acceptance_notify_before_expiration': 'int',
        'enable_credentials': 'bool',
        'enable_questionnaires': 'bool',
        'enable_checklists': 'bool',
        'enable_endpoint_metadata_import': 'bool',
        'enable_google_sheets': 'bool',
        'enable_rules_framework': 'bool',
        'enable_user_profile_editable': 'bool',
        'enable_product_tracking_files': 'bool',
        'enable_finding_groups': 'bool',
        'default_group_email_pattern': 'str',
        'staff_user_email_pattern': 'str',
        'default_group': 'int',
        'default_group_role': 'int'
    }

    attribute_map = {
        'id': 'id',
        'enable_auditlog': 'enable_auditlog',
        'enable_deduplication': 'enable_deduplication',
        'delete_duplicates': 'delete_duplicates',
        'max_dupes': 'max_dupes',
        'email_from': 'email_from',
        'enable_jira': 'enable_jira',
        'enable_jira_web_hook': 'enable_jira_web_hook',
        'disable_jira_webhook_secret': 'disable_jira_webhook_secret',
        'jira_webhook_secret': 'jira_webhook_secret',
        'jira_minimum_severity': 'jira_minimum_severity',
        'jira_labels': 'jira_labels',
        'enable_github': 'enable_github',
        'enable_slack_notifications': 'enable_slack_notifications',
        'slack_channel': 'slack_channel',
        'slack_token': 'slack_token',
        'slack_username': 'slack_username',
        'enable_msteams_notifications': 'enable_msteams_notifications',
        'msteams_url': 'msteams_url',
        'enable_mail_notifications': 'enable_mail_notifications',
        'mail_notifications_to': 'mail_notifications_to',
        'false_positive_history': 'false_positive_history',
        'url_prefix': 'url_prefix',
        'team_name': 'team_name',
        'time_zone': 'time_zone',
        'enable_product_grade': 'enable_product_grade',
        'product_grade': 'product_grade',
        'product_grade_a': 'product_grade_a',
        'product_grade_b': 'product_grade_b',
        'product_grade_c': 'product_grade_c',
        'product_grade_d': 'product_grade_d',
        'product_grade_f': 'product_grade_f',
        'enable_benchmark': 'enable_benchmark',
        'enable_template_match': 'enable_template_match',
        'engagement_auto_close': 'engagement_auto_close',
        'engagement_auto_close_days': 'engagement_auto_close_days',
        'enable_finding_sla': 'enable_finding_sla',
        'sla_critical': 'sla_critical',
        'sla_high': 'sla_high',
        'sla_medium': 'sla_medium',
        'sla_low': 'sla_low',
        'allow_anonymous_survey_repsonse': 'allow_anonymous_survey_repsonse',
        'credentials': 'credentials',
        'disclaimer': 'disclaimer',
        'column_widths': 'column_widths',
        'drive_folder_id': 'drive_folder_ID',
        'email_address': 'email_address',
        'risk_acceptance_form_default_days': 'risk_acceptance_form_default_days',
        'risk_acceptance_notify_before_expiration': 'risk_acceptance_notify_before_expiration',
        'enable_credentials': 'enable_credentials',
        'enable_questionnaires': 'enable_questionnaires',
        'enable_checklists': 'enable_checklists',
        'enable_endpoint_metadata_import': 'enable_endpoint_metadata_import',
        'enable_google_sheets': 'enable_google_sheets',
        'enable_rules_framework': 'enable_rules_framework',
        'enable_user_profile_editable': 'enable_user_profile_editable',
        'enable_product_tracking_files': 'enable_product_tracking_files',
        'enable_finding_groups': 'enable_finding_groups',
        'default_group_email_pattern': 'default_group_email_pattern',
        'staff_user_email_pattern': 'staff_user_email_pattern',
        'default_group': 'default_group',
        'default_group_role': 'default_group_role'
    }

    def __init__(self, id=None, enable_auditlog=None, enable_deduplication=None, delete_duplicates=None, max_dupes=None, email_from=None, enable_jira=None, enable_jira_web_hook=None, disable_jira_webhook_secret=None, jira_webhook_secret=None, jira_minimum_severity=None, jira_labels=None, enable_github=None, enable_slack_notifications=None, slack_channel=None, slack_token=None, slack_username=None, enable_msteams_notifications=None, msteams_url=None, enable_mail_notifications=None, mail_notifications_to=None, false_positive_history=None, url_prefix=None, team_name=None, time_zone=None, enable_product_grade=None, product_grade=None, product_grade_a=None, product_grade_b=None, product_grade_c=None, product_grade_d=None, product_grade_f=None, enable_benchmark=None, enable_template_match=None, engagement_auto_close=None, engagement_auto_close_days=None, enable_finding_sla=None, sla_critical=None, sla_high=None, sla_medium=None, sla_low=None, allow_anonymous_survey_repsonse=None, credentials=None, disclaimer=None, column_widths=None, drive_folder_id=None, email_address=None, risk_acceptance_form_default_days=None, risk_acceptance_notify_before_expiration=None, enable_credentials=None, enable_questionnaires=None, enable_checklists=None, enable_endpoint_metadata_import=None, enable_google_sheets=None, enable_rules_framework=None, enable_user_profile_editable=None, enable_product_tracking_files=None, enable_finding_groups=None, default_group_email_pattern=None, staff_user_email_pattern=None, default_group=None, default_group_role=None, local_vars_configuration=None):  # noqa: E501
        """SystemSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._enable_auditlog = None
        self._enable_deduplication = None
        self._delete_duplicates = None
        self._max_dupes = None
        self._email_from = None
        self._enable_jira = None
        self._enable_jira_web_hook = None
        self._disable_jira_webhook_secret = None
        self._jira_webhook_secret = None
        self._jira_minimum_severity = None
        self._jira_labels = None
        self._enable_github = None
        self._enable_slack_notifications = None
        self._slack_channel = None
        self._slack_token = None
        self._slack_username = None
        self._enable_msteams_notifications = None
        self._msteams_url = None
        self._enable_mail_notifications = None
        self._mail_notifications_to = None
        self._false_positive_history = None
        self._url_prefix = None
        self._team_name = None
        self._time_zone = None
        self._enable_product_grade = None
        self._product_grade = None
        self._product_grade_a = None
        self._product_grade_b = None
        self._product_grade_c = None
        self._product_grade_d = None
        self._product_grade_f = None
        self._enable_benchmark = None
        self._enable_template_match = None
        self._engagement_auto_close = None
        self._engagement_auto_close_days = None
        self._enable_finding_sla = None
        self._sla_critical = None
        self._sla_high = None
        self._sla_medium = None
        self._sla_low = None
        self._allow_anonymous_survey_repsonse = None
        self._credentials = None
        self._disclaimer = None
        self._column_widths = None
        self._drive_folder_id = None
        self._email_address = None
        self._risk_acceptance_form_default_days = None
        self._risk_acceptance_notify_before_expiration = None
        self._enable_credentials = None
        self._enable_questionnaires = None
        self._enable_checklists = None
        self._enable_endpoint_metadata_import = None
        self._enable_google_sheets = None
        self._enable_rules_framework = None
        self._enable_user_profile_editable = None
        self._enable_product_tracking_files = None
        self._enable_finding_groups = None
        self._default_group_email_pattern = None
        self._staff_user_email_pattern = None
        self._default_group = None
        self._default_group_role = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if enable_auditlog is not None:
            self.enable_auditlog = enable_auditlog
        if enable_deduplication is not None:
            self.enable_deduplication = enable_deduplication
        if delete_duplicates is not None:
            self.delete_duplicates = delete_duplicates
        self.max_dupes = max_dupes
        if email_from is not None:
            self.email_from = email_from
        if enable_jira is not None:
            self.enable_jira = enable_jira
        if enable_jira_web_hook is not None:
            self.enable_jira_web_hook = enable_jira_web_hook
        if disable_jira_webhook_secret is not None:
            self.disable_jira_webhook_secret = disable_jira_webhook_secret
        self.jira_webhook_secret = jira_webhook_secret
        self.jira_minimum_severity = jira_minimum_severity
        self.jira_labels = jira_labels
        if enable_github is not None:
            self.enable_github = enable_github
        if enable_slack_notifications is not None:
            self.enable_slack_notifications = enable_slack_notifications
        if slack_channel is not None:
            self.slack_channel = slack_channel
        if slack_token is not None:
            self.slack_token = slack_token
        if slack_username is not None:
            self.slack_username = slack_username
        if enable_msteams_notifications is not None:
            self.enable_msteams_notifications = enable_msteams_notifications
        if msteams_url is not None:
            self.msteams_url = msteams_url
        if enable_mail_notifications is not None:
            self.enable_mail_notifications = enable_mail_notifications
        if mail_notifications_to is not None:
            self.mail_notifications_to = mail_notifications_to
        if false_positive_history is not None:
            self.false_positive_history = false_positive_history
        if url_prefix is not None:
            self.url_prefix = url_prefix
        if team_name is not None:
            self.team_name = team_name
        if time_zone is not None:
            self.time_zone = time_zone
        if enable_product_grade is not None:
            self.enable_product_grade = enable_product_grade
        if product_grade is not None:
            self.product_grade = product_grade
        if product_grade_a is not None:
            self.product_grade_a = product_grade_a
        if product_grade_b is not None:
            self.product_grade_b = product_grade_b
        if product_grade_c is not None:
            self.product_grade_c = product_grade_c
        if product_grade_d is not None:
            self.product_grade_d = product_grade_d
        if product_grade_f is not None:
            self.product_grade_f = product_grade_f
        if enable_benchmark is not None:
            self.enable_benchmark = enable_benchmark
        if enable_template_match is not None:
            self.enable_template_match = enable_template_match
        if engagement_auto_close is not None:
            self.engagement_auto_close = engagement_auto_close
        if engagement_auto_close_days is not None:
            self.engagement_auto_close_days = engagement_auto_close_days
        if enable_finding_sla is not None:
            self.enable_finding_sla = enable_finding_sla
        if sla_critical is not None:
            self.sla_critical = sla_critical
        if sla_high is not None:
            self.sla_high = sla_high
        if sla_medium is not None:
            self.sla_medium = sla_medium
        if sla_low is not None:
            self.sla_low = sla_low
        if allow_anonymous_survey_repsonse is not None:
            self.allow_anonymous_survey_repsonse = allow_anonymous_survey_repsonse
        if credentials is not None:
            self.credentials = credentials
        if disclaimer is not None:
            self.disclaimer = disclaimer
        if column_widths is not None:
            self.column_widths = column_widths
        if drive_folder_id is not None:
            self.drive_folder_id = drive_folder_id
        if email_address is not None:
            self.email_address = email_address
        self.risk_acceptance_form_default_days = risk_acceptance_form_default_days
        self.risk_acceptance_notify_before_expiration = risk_acceptance_notify_before_expiration
        if enable_credentials is not None:
            self.enable_credentials = enable_credentials
        if enable_questionnaires is not None:
            self.enable_questionnaires = enable_questionnaires
        if enable_checklists is not None:
            self.enable_checklists = enable_checklists
        if enable_endpoint_metadata_import is not None:
            self.enable_endpoint_metadata_import = enable_endpoint_metadata_import
        if enable_google_sheets is not None:
            self.enable_google_sheets = enable_google_sheets
        if enable_rules_framework is not None:
            self.enable_rules_framework = enable_rules_framework
        if enable_user_profile_editable is not None:
            self.enable_user_profile_editable = enable_user_profile_editable
        if enable_product_tracking_files is not None:
            self.enable_product_tracking_files = enable_product_tracking_files
        if enable_finding_groups is not None:
            self.enable_finding_groups = enable_finding_groups
        if default_group_email_pattern is not None:
            self.default_group_email_pattern = default_group_email_pattern
        if staff_user_email_pattern is not None:
            self.staff_user_email_pattern = staff_user_email_pattern
        self.default_group = default_group
        self.default_group_role = default_group_role

    @property
    def id(self):
        """Gets the id of this SystemSettings.  # noqa: E501


        :return: The id of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SystemSettings.


        :param id: The id of this SystemSettings.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def enable_auditlog(self):
        """Gets the enable_auditlog of this SystemSettings.  # noqa: E501

        With this setting turned on, Dojo maintains an audit log of changes made to entities (Findings, Tests, Engagements, Procuts, ...)If you run big import you may want to disable this because the way django-auditlog currently works, there's a big performance hit. Especially during (re-)imports.  # noqa: E501

        :return: The enable_auditlog of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_auditlog

    @enable_auditlog.setter
    def enable_auditlog(self, enable_auditlog):
        """Sets the enable_auditlog of this SystemSettings.

        With this setting turned on, Dojo maintains an audit log of changes made to entities (Findings, Tests, Engagements, Procuts, ...)If you run big import you may want to disable this because the way django-auditlog currently works, there's a big performance hit. Especially during (re-)imports.  # noqa: E501

        :param enable_auditlog: The enable_auditlog of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_auditlog = enable_auditlog

    @property
    def enable_deduplication(self):
        """Gets the enable_deduplication of this SystemSettings.  # noqa: E501

        With this setting turned on, Dojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, Dojo marks the less recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.  # noqa: E501

        :return: The enable_deduplication of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_deduplication

    @enable_deduplication.setter
    def enable_deduplication(self, enable_deduplication):
        """Sets the enable_deduplication of this SystemSettings.

        With this setting turned on, Dojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, Dojo marks the less recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.  # noqa: E501

        :param enable_deduplication: The enable_deduplication of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_deduplication = enable_deduplication

    @property
    def delete_duplicates(self):
        """Gets the delete_duplicates of this SystemSettings.  # noqa: E501

        Requires next setting: maximum number of duplicates to retain.  # noqa: E501

        :return: The delete_duplicates of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._delete_duplicates

    @delete_duplicates.setter
    def delete_duplicates(self, delete_duplicates):
        """Sets the delete_duplicates of this SystemSettings.

        Requires next setting: maximum number of duplicates to retain.  # noqa: E501

        :param delete_duplicates: The delete_duplicates of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._delete_duplicates = delete_duplicates

    @property
    def max_dupes(self):
        """Gets the max_dupes of this SystemSettings.  # noqa: E501

        When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted. Duplicate will not be deleted when left empty. A value of 0 will remove all duplicates.  # noqa: E501

        :return: The max_dupes of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_dupes

    @max_dupes.setter
    def max_dupes(self, max_dupes):
        """Sets the max_dupes of this SystemSettings.

        When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted. Duplicate will not be deleted when left empty. A value of 0 will remove all duplicates.  # noqa: E501

        :param max_dupes: The max_dupes of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_dupes is not None and max_dupes > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `max_dupes`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_dupes is not None and max_dupes < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `max_dupes`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._max_dupes = max_dupes

    @property
    def email_from(self):
        """Gets the email_from of this SystemSettings.  # noqa: E501


        :return: The email_from of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._email_from

    @email_from.setter
    def email_from(self, email_from):
        """Sets the email_from of this SystemSettings.


        :param email_from: The email_from of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email_from is not None and len(email_from) > 200):
            raise ValueError("Invalid value for `email_from`, length must be less than or equal to `200`")  # noqa: E501

        self._email_from = email_from

    @property
    def enable_jira(self):
        """Gets the enable_jira of this SystemSettings.  # noqa: E501


        :return: The enable_jira of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_jira

    @enable_jira.setter
    def enable_jira(self, enable_jira):
        """Sets the enable_jira of this SystemSettings.


        :param enable_jira: The enable_jira of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_jira = enable_jira

    @property
    def enable_jira_web_hook(self):
        """Gets the enable_jira_web_hook of this SystemSettings.  # noqa: E501

        Please note: It is strongly recommended to use a secret below and / or IP whitelist the JIRA server using a proxy such as Nginx.  # noqa: E501

        :return: The enable_jira_web_hook of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_jira_web_hook

    @enable_jira_web_hook.setter
    def enable_jira_web_hook(self, enable_jira_web_hook):
        """Sets the enable_jira_web_hook of this SystemSettings.

        Please note: It is strongly recommended to use a secret below and / or IP whitelist the JIRA server using a proxy such as Nginx.  # noqa: E501

        :param enable_jira_web_hook: The enable_jira_web_hook of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_jira_web_hook = enable_jira_web_hook

    @property
    def disable_jira_webhook_secret(self):
        """Gets the disable_jira_webhook_secret of this SystemSettings.  # noqa: E501

        Allows incoming requests without a secret (discouraged legacy behaviour)  # noqa: E501

        :return: The disable_jira_webhook_secret of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._disable_jira_webhook_secret

    @disable_jira_webhook_secret.setter
    def disable_jira_webhook_secret(self, disable_jira_webhook_secret):
        """Sets the disable_jira_webhook_secret of this SystemSettings.

        Allows incoming requests without a secret (discouraged legacy behaviour)  # noqa: E501

        :param disable_jira_webhook_secret: The disable_jira_webhook_secret of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._disable_jira_webhook_secret = disable_jira_webhook_secret

    @property
    def jira_webhook_secret(self):
        """Gets the jira_webhook_secret of this SystemSettings.  # noqa: E501

        Secret needed in URL for incoming JIRA Webhook  # noqa: E501

        :return: The jira_webhook_secret of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._jira_webhook_secret

    @jira_webhook_secret.setter
    def jira_webhook_secret(self, jira_webhook_secret):
        """Sets the jira_webhook_secret of this SystemSettings.

        Secret needed in URL for incoming JIRA Webhook  # noqa: E501

        :param jira_webhook_secret: The jira_webhook_secret of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                jira_webhook_secret is not None and len(jira_webhook_secret) > 64):
            raise ValueError("Invalid value for `jira_webhook_secret`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                jira_webhook_secret is not None and len(jira_webhook_secret) < 1):
            raise ValueError("Invalid value for `jira_webhook_secret`, length must be greater than or equal to `1`")  # noqa: E501

        self._jira_webhook_secret = jira_webhook_secret

    @property
    def jira_minimum_severity(self):
        """Gets the jira_minimum_severity of this SystemSettings.  # noqa: E501


        :return: The jira_minimum_severity of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._jira_minimum_severity

    @jira_minimum_severity.setter
    def jira_minimum_severity(self, jira_minimum_severity):
        """Sets the jira_minimum_severity of this SystemSettings.


        :param jira_minimum_severity: The jira_minimum_severity of this SystemSettings.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"Critical", "High", "Medium", "Low", "Info"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and jira_minimum_severity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `jira_minimum_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(jira_minimum_severity, allowed_values)
            )

        self._jira_minimum_severity = jira_minimum_severity

    @property
    def jira_labels(self):
        """Gets the jira_labels of this SystemSettings.  # noqa: E501

        JIRA issue labels space seperated  # noqa: E501

        :return: The jira_labels of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._jira_labels

    @jira_labels.setter
    def jira_labels(self, jira_labels):
        """Sets the jira_labels of this SystemSettings.

        JIRA issue labels space seperated  # noqa: E501

        :param jira_labels: The jira_labels of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                jira_labels is not None and len(jira_labels) > 200):
            raise ValueError("Invalid value for `jira_labels`, length must be less than or equal to `200`")  # noqa: E501

        self._jira_labels = jira_labels

    @property
    def enable_github(self):
        """Gets the enable_github of this SystemSettings.  # noqa: E501


        :return: The enable_github of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_github

    @enable_github.setter
    def enable_github(self, enable_github):
        """Sets the enable_github of this SystemSettings.


        :param enable_github: The enable_github of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_github = enable_github

    @property
    def enable_slack_notifications(self):
        """Gets the enable_slack_notifications of this SystemSettings.  # noqa: E501


        :return: The enable_slack_notifications of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_slack_notifications

    @enable_slack_notifications.setter
    def enable_slack_notifications(self, enable_slack_notifications):
        """Sets the enable_slack_notifications of this SystemSettings.


        :param enable_slack_notifications: The enable_slack_notifications of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_slack_notifications = enable_slack_notifications

    @property
    def slack_channel(self):
        """Gets the slack_channel of this SystemSettings.  # noqa: E501

        Optional. Needed if you want to send global notifications.  # noqa: E501

        :return: The slack_channel of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._slack_channel

    @slack_channel.setter
    def slack_channel(self, slack_channel):
        """Sets the slack_channel of this SystemSettings.

        Optional. Needed if you want to send global notifications.  # noqa: E501

        :param slack_channel: The slack_channel of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                slack_channel is not None and len(slack_channel) > 100):
            raise ValueError("Invalid value for `slack_channel`, length must be less than or equal to `100`")  # noqa: E501

        self._slack_channel = slack_channel

    @property
    def slack_token(self):
        """Gets the slack_token of this SystemSettings.  # noqa: E501

        Token required for interacting with Slack. Get one at https://api.slack.com/tokens  # noqa: E501

        :return: The slack_token of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._slack_token

    @slack_token.setter
    def slack_token(self, slack_token):
        """Sets the slack_token of this SystemSettings.

        Token required for interacting with Slack. Get one at https://api.slack.com/tokens  # noqa: E501

        :param slack_token: The slack_token of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                slack_token is not None and len(slack_token) > 100):
            raise ValueError("Invalid value for `slack_token`, length must be less than or equal to `100`")  # noqa: E501

        self._slack_token = slack_token

    @property
    def slack_username(self):
        """Gets the slack_username of this SystemSettings.  # noqa: E501

        Optional. Will take your bot name otherwise.  # noqa: E501

        :return: The slack_username of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._slack_username

    @slack_username.setter
    def slack_username(self, slack_username):
        """Sets the slack_username of this SystemSettings.

        Optional. Will take your bot name otherwise.  # noqa: E501

        :param slack_username: The slack_username of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                slack_username is not None and len(slack_username) > 100):
            raise ValueError("Invalid value for `slack_username`, length must be less than or equal to `100`")  # noqa: E501

        self._slack_username = slack_username

    @property
    def enable_msteams_notifications(self):
        """Gets the enable_msteams_notifications of this SystemSettings.  # noqa: E501


        :return: The enable_msteams_notifications of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_msteams_notifications

    @enable_msteams_notifications.setter
    def enable_msteams_notifications(self, enable_msteams_notifications):
        """Sets the enable_msteams_notifications of this SystemSettings.


        :param enable_msteams_notifications: The enable_msteams_notifications of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_msteams_notifications = enable_msteams_notifications

    @property
    def msteams_url(self):
        """Gets the msteams_url of this SystemSettings.  # noqa: E501

        The full URL of the incoming webhook  # noqa: E501

        :return: The msteams_url of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._msteams_url

    @msteams_url.setter
    def msteams_url(self, msteams_url):
        """Sets the msteams_url of this SystemSettings.

        The full URL of the incoming webhook  # noqa: E501

        :param msteams_url: The msteams_url of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                msteams_url is not None and len(msteams_url) > 400):
            raise ValueError("Invalid value for `msteams_url`, length must be less than or equal to `400`")  # noqa: E501

        self._msteams_url = msteams_url

    @property
    def enable_mail_notifications(self):
        """Gets the enable_mail_notifications of this SystemSettings.  # noqa: E501


        :return: The enable_mail_notifications of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_mail_notifications

    @enable_mail_notifications.setter
    def enable_mail_notifications(self, enable_mail_notifications):
        """Sets the enable_mail_notifications of this SystemSettings.


        :param enable_mail_notifications: The enable_mail_notifications of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_mail_notifications = enable_mail_notifications

    @property
    def mail_notifications_to(self):
        """Gets the mail_notifications_to of this SystemSettings.  # noqa: E501


        :return: The mail_notifications_to of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._mail_notifications_to

    @mail_notifications_to.setter
    def mail_notifications_to(self, mail_notifications_to):
        """Sets the mail_notifications_to of this SystemSettings.


        :param mail_notifications_to: The mail_notifications_to of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                mail_notifications_to is not None and len(mail_notifications_to) > 200):
            raise ValueError("Invalid value for `mail_notifications_to`, length must be less than or equal to `200`")  # noqa: E501

        self._mail_notifications_to = mail_notifications_to

    @property
    def false_positive_history(self):
        """Gets the false_positive_history of this SystemSettings.  # noqa: E501

        DefectDojo will automatically mark the finding as a false positive if the finding has been previously marked as a false positive. Not needed when using deduplication, advised to not combine these two.  # noqa: E501

        :return: The false_positive_history of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._false_positive_history

    @false_positive_history.setter
    def false_positive_history(self, false_positive_history):
        """Sets the false_positive_history of this SystemSettings.

        DefectDojo will automatically mark the finding as a false positive if the finding has been previously marked as a false positive. Not needed when using deduplication, advised to not combine these two.  # noqa: E501

        :param false_positive_history: The false_positive_history of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._false_positive_history = false_positive_history

    @property
    def url_prefix(self):
        """Gets the url_prefix of this SystemSettings.  # noqa: E501

        URL prefix if DefectDojo is installed in it's own virtual subdirectory.  # noqa: E501

        :return: The url_prefix of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._url_prefix

    @url_prefix.setter
    def url_prefix(self, url_prefix):
        """Sets the url_prefix of this SystemSettings.

        URL prefix if DefectDojo is installed in it's own virtual subdirectory.  # noqa: E501

        :param url_prefix: The url_prefix of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url_prefix is not None and len(url_prefix) > 300):
            raise ValueError("Invalid value for `url_prefix`, length must be less than or equal to `300`")  # noqa: E501

        self._url_prefix = url_prefix

    @property
    def team_name(self):
        """Gets the team_name of this SystemSettings.  # noqa: E501


        :return: The team_name of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this SystemSettings.


        :param team_name: The team_name of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                team_name is not None and len(team_name) > 100):
            raise ValueError("Invalid value for `team_name`, length must be less than or equal to `100`")  # noqa: E501

        self._team_name = team_name

    @property
    def time_zone(self):
        """Gets the time_zone of this SystemSettings.  # noqa: E501


        :return: The time_zone of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this SystemSettings.


        :param time_zone: The time_zone of this SystemSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["Africa/Abidjan", "Africa/Accra", "Africa/Addis_Ababa", "Africa/Algiers", "Africa/Asmara", "Africa/Asmera", "Africa/Bamako", "Africa/Bangui", "Africa/Banjul", "Africa/Bissau", "Africa/Blantyre", "Africa/Brazzaville", "Africa/Bujumbura", "Africa/Cairo", "Africa/Casablanca", "Africa/Ceuta", "Africa/Conakry", "Africa/Dakar", "Africa/Dar_es_Salaam", "Africa/Djibouti", "Africa/Douala", "Africa/El_Aaiun", "Africa/Freetown", "Africa/Gaborone", "Africa/Harare", "Africa/Johannesburg", "Africa/Juba", "Africa/Kampala", "Africa/Khartoum", "Africa/Kigali", "Africa/Kinshasa", "Africa/Lagos", "Africa/Libreville", "Africa/Lome", "Africa/Luanda", "Africa/Lubumbashi", "Africa/Lusaka", "Africa/Malabo", "Africa/Maputo", "Africa/Maseru", "Africa/Mbabane", "Africa/Mogadishu", "Africa/Monrovia", "Africa/Nairobi", "Africa/Ndjamena", "Africa/Niamey", "Africa/Nouakchott", "Africa/Ouagadougou", "Africa/Porto-Novo", "Africa/Sao_Tome", "Africa/Timbuktu", "Africa/Tripoli", "Africa/Tunis", "Africa/Windhoek", "America/Adak", "America/Anchorage", "America/Anguilla", "America/Antigua", "America/Araguaina", "America/Argentina/Buenos_Aires", "America/Argentina/Catamarca", "America/Argentina/ComodRivadavia", "America/Argentina/Cordoba", "America/Argentina/Jujuy", "America/Argentina/La_Rioja", "America/Argentina/Mendoza", "America/Argentina/Rio_Gallegos", "America/Argentina/Salta", "America/Argentina/San_Juan", "America/Argentina/San_Luis", "America/Argentina/Tucuman", "America/Argentina/Ushuaia", "America/Aruba", "America/Asuncion", "America/Atikokan", "America/Atka", "America/Bahia", "America/Bahia_Banderas", "America/Barbados", "America/Belem", "America/Belize", "America/Blanc-Sablon", "America/Boa_Vista", "America/Bogota", "America/Boise", "America/Buenos_Aires", "America/Cambridge_Bay", "America/Campo_Grande", "America/Cancun", "America/Caracas", "America/Catamarca", "America/Cayenne", "America/Cayman", "America/Chicago", "America/Chihuahua", "America/Coral_Harbour", "America/Cordoba", "America/Costa_Rica", "America/Creston", "America/Cuiaba", "America/Curacao", "America/Danmarkshavn", "America/Dawson", "America/Dawson_Creek", "America/Denver", "America/Detroit", "America/Dominica", "America/Edmonton", "America/Eirunepe", "America/El_Salvador", "America/Ensenada", "America/Fort_Nelson", "America/Fort_Wayne", "America/Fortaleza", "America/Glace_Bay", "America/Godthab", "America/Goose_Bay", "America/Grand_Turk", "America/Grenada", "America/Guadeloupe", "America/Guatemala", "America/Guayaquil", "America/Guyana", "America/Halifax", "America/Havana", "America/Hermosillo", "America/Indiana/Indianapolis", "America/Indiana/Knox", "America/Indiana/Marengo", "America/Indiana/Petersburg", "America/Indiana/Tell_City", "America/Indiana/Vevay", "America/Indiana/Vincennes", "America/Indiana/Winamac", "America/Indianapolis", "America/Inuvik", "America/Iqaluit", "America/Jamaica", "America/Jujuy", "America/Juneau", "America/Kentucky/Louisville", "America/Kentucky/Monticello", "America/Knox_IN", "America/Kralendijk", "America/La_Paz", "America/Lima", "America/Los_Angeles", "America/Louisville", "America/Lower_Princes", "America/Maceio", "America/Managua", "America/Manaus", "America/Marigot", "America/Martinique", "America/Matamoros", "America/Mazatlan", "America/Mendoza", "America/Menominee", "America/Merida", "America/Metlakatla", "America/Mexico_City", "America/Miquelon", "America/Moncton", "America/Monterrey", "America/Montevideo", "America/Montreal", "America/Montserrat", "America/Nassau", "America/New_York", "America/Nipigon", "America/Nome", "America/Noronha", "America/North_Dakota/Beulah", "America/North_Dakota/Center", "America/North_Dakota/New_Salem", "America/Nuuk", "America/Ojinaga", "America/Panama", "America/Pangnirtung", "America/Paramaribo", "America/Phoenix", "America/Port-au-Prince", "America/Port_of_Spain", "America/Porto_Acre", "America/Porto_Velho", "America/Puerto_Rico", "America/Punta_Arenas", "America/Rainy_River", "America/Rankin_Inlet", "America/Recife", "America/Regina", "America/Resolute", "America/Rio_Branco", "America/Rosario", "America/Santa_Isabel", "America/Santarem", "America/Santiago", "America/Santo_Domingo", "America/Sao_Paulo", "America/Scoresbysund", "America/Shiprock", "America/Sitka", "America/St_Barthelemy", "America/St_Johns", "America/St_Kitts", "America/St_Lucia", "America/St_Thomas", "America/St_Vincent", "America/Swift_Current", "America/Tegucigalpa", "America/Thule", "America/Thunder_Bay", "America/Tijuana", "America/Toronto", "America/Tortola", "America/Vancouver", "America/Virgin", "America/Whitehorse", "America/Winnipeg", "America/Yakutat", "America/Yellowknife", "Antarctica/Casey", "Antarctica/Davis", "Antarctica/DumontDUrville", "Antarctica/Macquarie", "Antarctica/Mawson", "Antarctica/McMurdo", "Antarctica/Palmer", "Antarctica/Rothera", "Antarctica/South_Pole", "Antarctica/Syowa", "Antarctica/Troll", "Antarctica/Vostok", "Arctic/Longyearbyen", "Asia/Aden", "Asia/Almaty", "Asia/Amman", "Asia/Anadyr", "Asia/Aqtau", "Asia/Aqtobe", "Asia/Ashgabat", "Asia/Ashkhabad", "Asia/Atyrau", "Asia/Baghdad", "Asia/Bahrain", "Asia/Baku", "Asia/Bangkok", "Asia/Barnaul", "Asia/Beirut", "Asia/Bishkek", "Asia/Brunei", "Asia/Calcutta", "Asia/Chita", "Asia/Choibalsan", "Asia/Chongqing", "Asia/Chungking", "Asia/Colombo", "Asia/Dacca", "Asia/Damascus", "Asia/Dhaka", "Asia/Dili", "Asia/Dubai", "Asia/Dushanbe", "Asia/Famagusta", "Asia/Gaza", "Asia/Harbin", "Asia/Hebron", "Asia/Ho_Chi_Minh", "Asia/Hong_Kong", "Asia/Hovd", "Asia/Irkutsk", "Asia/Istanbul", "Asia/Jakarta", "Asia/Jayapura", "Asia/Jerusalem", "Asia/Kabul", "Asia/Kamchatka", "Asia/Karachi", "Asia/Kashgar", "Asia/Kathmandu", "Asia/Katmandu", "Asia/Khandyga", "Asia/Kolkata", "Asia/Krasnoyarsk", "Asia/Kuala_Lumpur", "Asia/Kuching", "Asia/Kuwait", "Asia/Macao", "Asia/Macau", "Asia/Magadan", "Asia/Makassar", "Asia/Manila", "Asia/Muscat", "Asia/Nicosia", "Asia/Novokuznetsk", "Asia/Novosibirsk", "Asia/Omsk", "Asia/Oral", "Asia/Phnom_Penh", "Asia/Pontianak", "Asia/Pyongyang", "Asia/Qatar", "Asia/Qostanay", "Asia/Qyzylorda", "Asia/Rangoon", "Asia/Riyadh", "Asia/Saigon", "Asia/Sakhalin", "Asia/Samarkand", "Asia/Seoul", "Asia/Shanghai", "Asia/Singapore", "Asia/Srednekolymsk", "Asia/Taipei", "Asia/Tashkent", "Asia/Tbilisi", "Asia/Tehran", "Asia/Tel_Aviv", "Asia/Thimbu", "Asia/Thimphu", "Asia/Tokyo", "Asia/Tomsk", "Asia/Ujung_Pandang", "Asia/Ulaanbaatar", "Asia/Ulan_Bator", "Asia/Urumqi", "Asia/Ust-Nera", "Asia/Vientiane", "Asia/Vladivostok", "Asia/Yakutsk", "Asia/Yangon", "Asia/Yekaterinburg", "Asia/Yerevan", "Atlantic/Azores", "Atlantic/Bermuda", "Atlantic/Canary", "Atlantic/Cape_Verde", "Atlantic/Faeroe", "Atlantic/Faroe", "Atlantic/Jan_Mayen", "Atlantic/Madeira", "Atlantic/Reykjavik", "Atlantic/South_Georgia", "Atlantic/St_Helena", "Atlantic/Stanley", "Australia/ACT", "Australia/Adelaide", "Australia/Brisbane", "Australia/Broken_Hill", "Australia/Canberra", "Australia/Currie", "Australia/Darwin", "Australia/Eucla", "Australia/Hobart", "Australia/LHI", "Australia/Lindeman", "Australia/Lord_Howe", "Australia/Melbourne", "Australia/NSW", "Australia/North", "Australia/Perth", "Australia/Queensland", "Australia/South", "Australia/Sydney", "Australia/Tasmania", "Australia/Victoria", "Australia/West", "Australia/Yancowinna", "Brazil/Acre", "Brazil/DeNoronha", "Brazil/East", "Brazil/West", "CET", "CST6CDT", "Canada/Atlantic", "Canada/Central", "Canada/Eastern", "Canada/Mountain", "Canada/Newfoundland", "Canada/Pacific", "Canada/Saskatchewan", "Canada/Yukon", "Chile/Continental", "Chile/EasterIsland", "Cuba", "EET", "EST", "EST5EDT", "Egypt", "Eire", "Etc/GMT", "Etc/GMT+0", "Etc/GMT+1", "Etc/GMT+10", "Etc/GMT+11", "Etc/GMT+12", "Etc/GMT+2", "Etc/GMT+3", "Etc/GMT+4", "Etc/GMT+5", "Etc/GMT+6", "Etc/GMT+7", "Etc/GMT+8", "Etc/GMT+9", "Etc/GMT-0", "Etc/GMT-1", "Etc/GMT-10", "Etc/GMT-11", "Etc/GMT-12", "Etc/GMT-13", "Etc/GMT-14", "Etc/GMT-2", "Etc/GMT-3", "Etc/GMT-4", "Etc/GMT-5", "Etc/GMT-6", "Etc/GMT-7", "Etc/GMT-8", "Etc/GMT-9", "Etc/GMT0", "Etc/Greenwich", "Etc/UCT", "Etc/UTC", "Etc/Universal", "Etc/Zulu", "Europe/Amsterdam", "Europe/Andorra", "Europe/Astrakhan", "Europe/Athens", "Europe/Belfast", "Europe/Belgrade", "Europe/Berlin", "Europe/Bratislava", "Europe/Brussels", "Europe/Bucharest", "Europe/Budapest", "Europe/Busingen", "Europe/Chisinau", "Europe/Copenhagen", "Europe/Dublin", "Europe/Gibraltar", "Europe/Guernsey", "Europe/Helsinki", "Europe/Isle_of_Man", "Europe/Istanbul", "Europe/Jersey", "Europe/Kaliningrad", "Europe/Kiev", "Europe/Kirov", "Europe/Lisbon", "Europe/Ljubljana", "Europe/London", "Europe/Luxembourg", "Europe/Madrid", "Europe/Malta", "Europe/Mariehamn", "Europe/Minsk", "Europe/Monaco", "Europe/Moscow", "Europe/Nicosia", "Europe/Oslo", "Europe/Paris", "Europe/Podgorica", "Europe/Prague", "Europe/Riga", "Europe/Rome", "Europe/Samara", "Europe/San_Marino", "Europe/Sarajevo", "Europe/Saratov", "Europe/Simferopol", "Europe/Skopje", "Europe/Sofia", "Europe/Stockholm", "Europe/Tallinn", "Europe/Tirane", "Europe/Tiraspol", "Europe/Ulyanovsk", "Europe/Uzhgorod", "Europe/Vaduz", "Europe/Vatican", "Europe/Vienna", "Europe/Vilnius", "Europe/Volgograd", "Europe/Warsaw", "Europe/Zagreb", "Europe/Zaporozhye", "Europe/Zurich", "GB", "GB-Eire", "GMT", "GMT+0", "GMT-0", "GMT0", "Greenwich", "HST", "Hongkong", "Iceland", "Indian/Antananarivo", "Indian/Chagos", "Indian/Christmas", "Indian/Cocos", "Indian/Comoro", "Indian/Kerguelen", "Indian/Mahe", "Indian/Maldives", "Indian/Mauritius", "Indian/Mayotte", "Indian/Reunion", "Iran", "Israel", "Jamaica", "Japan", "Kwajalein", "Libya", "MET", "MST", "MST7MDT", "Mexico/BajaNorte", "Mexico/BajaSur", "Mexico/General", "NZ", "NZ-CHAT", "Navajo", "PRC", "PST8PDT", "Pacific/Apia", "Pacific/Auckland", "Pacific/Bougainville", "Pacific/Chatham", "Pacific/Chuuk", "Pacific/Easter", "Pacific/Efate", "Pacific/Enderbury", "Pacific/Fakaofo", "Pacific/Fiji", "Pacific/Funafuti", "Pacific/Galapagos", "Pacific/Gambier", "Pacific/Guadalcanal", "Pacific/Guam", "Pacific/Honolulu", "Pacific/Johnston", "Pacific/Kanton", "Pacific/Kiritimati", "Pacific/Kosrae", "Pacific/Kwajalein", "Pacific/Majuro", "Pacific/Marquesas", "Pacific/Midway", "Pacific/Nauru", "Pacific/Niue", "Pacific/Norfolk", "Pacific/Noumea", "Pacific/Pago_Pago", "Pacific/Palau", "Pacific/Pitcairn", "Pacific/Pohnpei", "Pacific/Ponape", "Pacific/Port_Moresby", "Pacific/Rarotonga", "Pacific/Saipan", "Pacific/Samoa", "Pacific/Tahiti", "Pacific/Tarawa", "Pacific/Tongatapu", "Pacific/Truk", "Pacific/Wake", "Pacific/Wallis", "Pacific/Yap", "Poland", "Portugal", "ROC", "ROK", "Singapore", "Turkey", "UCT", "US/Alaska", "US/Aleutian", "US/Arizona", "US/Central", "US/East-Indiana", "US/Eastern", "US/Hawaii", "US/Indiana-Starke", "US/Michigan", "US/Mountain", "US/Pacific", "US/Samoa", "UTC", "Universal", "W-SU", "WET", "Zulu"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and time_zone not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `time_zone` ({0}), must be one of {1}"  # noqa: E501
                .format(time_zone, allowed_values)
            )

        self._time_zone = time_zone

    @property
    def enable_product_grade(self):
        """Gets the enable_product_grade of this SystemSettings.  # noqa: E501

        Displays a grade letter next to a product to show the overall health.  # noqa: E501

        :return: The enable_product_grade of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_product_grade

    @enable_product_grade.setter
    def enable_product_grade(self, enable_product_grade):
        """Sets the enable_product_grade of this SystemSettings.

        Displays a grade letter next to a product to show the overall health.  # noqa: E501

        :param enable_product_grade: The enable_product_grade of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_product_grade = enable_product_grade

    @property
    def product_grade(self):
        """Gets the product_grade of this SystemSettings.  # noqa: E501


        :return: The product_grade of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._product_grade

    @product_grade.setter
    def product_grade(self, product_grade):
        """Sets the product_grade of this SystemSettings.


        :param product_grade: The product_grade of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                product_grade is not None and len(product_grade) > 800):
            raise ValueError("Invalid value for `product_grade`, length must be less than or equal to `800`")  # noqa: E501

        self._product_grade = product_grade

    @property
    def product_grade_a(self):
        """Gets the product_grade_a of this SystemSettings.  # noqa: E501

        Percentage score for an 'A' >=  # noqa: E501

        :return: The product_grade_a of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._product_grade_a

    @product_grade_a.setter
    def product_grade_a(self, product_grade_a):
        """Sets the product_grade_a of this SystemSettings.

        Percentage score for an 'A' >=  # noqa: E501

        :param product_grade_a: The product_grade_a of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                product_grade_a is not None and product_grade_a > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `product_grade_a`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                product_grade_a is not None and product_grade_a < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `product_grade_a`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._product_grade_a = product_grade_a

    @property
    def product_grade_b(self):
        """Gets the product_grade_b of this SystemSettings.  # noqa: E501

        Percentage score for a 'B' >=  # noqa: E501

        :return: The product_grade_b of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._product_grade_b

    @product_grade_b.setter
    def product_grade_b(self, product_grade_b):
        """Sets the product_grade_b of this SystemSettings.

        Percentage score for a 'B' >=  # noqa: E501

        :param product_grade_b: The product_grade_b of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                product_grade_b is not None and product_grade_b > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `product_grade_b`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                product_grade_b is not None and product_grade_b < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `product_grade_b`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._product_grade_b = product_grade_b

    @property
    def product_grade_c(self):
        """Gets the product_grade_c of this SystemSettings.  # noqa: E501

        Percentage score for a 'C' >=  # noqa: E501

        :return: The product_grade_c of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._product_grade_c

    @product_grade_c.setter
    def product_grade_c(self, product_grade_c):
        """Sets the product_grade_c of this SystemSettings.

        Percentage score for a 'C' >=  # noqa: E501

        :param product_grade_c: The product_grade_c of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                product_grade_c is not None and product_grade_c > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `product_grade_c`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                product_grade_c is not None and product_grade_c < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `product_grade_c`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._product_grade_c = product_grade_c

    @property
    def product_grade_d(self):
        """Gets the product_grade_d of this SystemSettings.  # noqa: E501

        Percentage score for a 'D' >=  # noqa: E501

        :return: The product_grade_d of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._product_grade_d

    @product_grade_d.setter
    def product_grade_d(self, product_grade_d):
        """Sets the product_grade_d of this SystemSettings.

        Percentage score for a 'D' >=  # noqa: E501

        :param product_grade_d: The product_grade_d of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                product_grade_d is not None and product_grade_d > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `product_grade_d`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                product_grade_d is not None and product_grade_d < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `product_grade_d`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._product_grade_d = product_grade_d

    @property
    def product_grade_f(self):
        """Gets the product_grade_f of this SystemSettings.  # noqa: E501

        Percentage score for an 'F' <=  # noqa: E501

        :return: The product_grade_f of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._product_grade_f

    @product_grade_f.setter
    def product_grade_f(self, product_grade_f):
        """Sets the product_grade_f of this SystemSettings.

        Percentage score for an 'F' <=  # noqa: E501

        :param product_grade_f: The product_grade_f of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                product_grade_f is not None and product_grade_f > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `product_grade_f`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                product_grade_f is not None and product_grade_f < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `product_grade_f`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._product_grade_f = product_grade_f

    @property
    def enable_benchmark(self):
        """Gets the enable_benchmark of this SystemSettings.  # noqa: E501

        Enables Benchmarks such as the OWASP ASVS (Application Security Verification Standard)  # noqa: E501

        :return: The enable_benchmark of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_benchmark

    @enable_benchmark.setter
    def enable_benchmark(self, enable_benchmark):
        """Sets the enable_benchmark of this SystemSettings.

        Enables Benchmarks such as the OWASP ASVS (Application Security Verification Standard)  # noqa: E501

        :param enable_benchmark: The enable_benchmark of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_benchmark = enable_benchmark

    @property
    def enable_template_match(self):
        """Gets the enable_template_match of this SystemSettings.  # noqa: E501

        Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for providing consistent impact and remediation advice regardless of the scanner.  # noqa: E501

        :return: The enable_template_match of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_template_match

    @enable_template_match.setter
    def enable_template_match(self, enable_template_match):
        """Sets the enable_template_match of this SystemSettings.

        Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for providing consistent impact and remediation advice regardless of the scanner.  # noqa: E501

        :param enable_template_match: The enable_template_match of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_template_match = enable_template_match

    @property
    def engagement_auto_close(self):
        """Gets the engagement_auto_close of this SystemSettings.  # noqa: E501

        Closes an engagement after 3 days (default) past due date including last update.  # noqa: E501

        :return: The engagement_auto_close of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._engagement_auto_close

    @engagement_auto_close.setter
    def engagement_auto_close(self, engagement_auto_close):
        """Sets the engagement_auto_close of this SystemSettings.

        Closes an engagement after 3 days (default) past due date including last update.  # noqa: E501

        :param engagement_auto_close: The engagement_auto_close of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._engagement_auto_close = engagement_auto_close

    @property
    def engagement_auto_close_days(self):
        """Gets the engagement_auto_close_days of this SystemSettings.  # noqa: E501

        Closes an engagement after the specified number of days past due date including last update.  # noqa: E501

        :return: The engagement_auto_close_days of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._engagement_auto_close_days

    @engagement_auto_close_days.setter
    def engagement_auto_close_days(self, engagement_auto_close_days):
        """Sets the engagement_auto_close_days of this SystemSettings.

        Closes an engagement after the specified number of days past due date including last update.  # noqa: E501

        :param engagement_auto_close_days: The engagement_auto_close_days of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                engagement_auto_close_days is not None and engagement_auto_close_days > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `engagement_auto_close_days`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                engagement_auto_close_days is not None and engagement_auto_close_days < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `engagement_auto_close_days`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._engagement_auto_close_days = engagement_auto_close_days

    @property
    def enable_finding_sla(self):
        """Gets the enable_finding_sla of this SystemSettings.  # noqa: E501

        Enables Finding SLA's for time to remediate.  # noqa: E501

        :return: The enable_finding_sla of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_finding_sla

    @enable_finding_sla.setter
    def enable_finding_sla(self, enable_finding_sla):
        """Sets the enable_finding_sla of this SystemSettings.

        Enables Finding SLA's for time to remediate.  # noqa: E501

        :param enable_finding_sla: The enable_finding_sla of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_finding_sla = enable_finding_sla

    @property
    def sla_critical(self):
        """Gets the sla_critical of this SystemSettings.  # noqa: E501

        # of days to remediate a critical finding.  # noqa: E501

        :return: The sla_critical of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._sla_critical

    @sla_critical.setter
    def sla_critical(self, sla_critical):
        """Sets the sla_critical of this SystemSettings.

        # of days to remediate a critical finding.  # noqa: E501

        :param sla_critical: The sla_critical of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                sla_critical is not None and sla_critical > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `sla_critical`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sla_critical is not None and sla_critical < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `sla_critical`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._sla_critical = sla_critical

    @property
    def sla_high(self):
        """Gets the sla_high of this SystemSettings.  # noqa: E501

        # of days to remediate a high finding.  # noqa: E501

        :return: The sla_high of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._sla_high

    @sla_high.setter
    def sla_high(self, sla_high):
        """Sets the sla_high of this SystemSettings.

        # of days to remediate a high finding.  # noqa: E501

        :param sla_high: The sla_high of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                sla_high is not None and sla_high > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `sla_high`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sla_high is not None and sla_high < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `sla_high`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._sla_high = sla_high

    @property
    def sla_medium(self):
        """Gets the sla_medium of this SystemSettings.  # noqa: E501

        # of days to remediate a medium finding.  # noqa: E501

        :return: The sla_medium of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._sla_medium

    @sla_medium.setter
    def sla_medium(self, sla_medium):
        """Sets the sla_medium of this SystemSettings.

        # of days to remediate a medium finding.  # noqa: E501

        :param sla_medium: The sla_medium of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                sla_medium is not None and sla_medium > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `sla_medium`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sla_medium is not None and sla_medium < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `sla_medium`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._sla_medium = sla_medium

    @property
    def sla_low(self):
        """Gets the sla_low of this SystemSettings.  # noqa: E501

        # of days to remediate a low finding.  # noqa: E501

        :return: The sla_low of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._sla_low

    @sla_low.setter
    def sla_low(self, sla_low):
        """Sets the sla_low of this SystemSettings.

        # of days to remediate a low finding.  # noqa: E501

        :param sla_low: The sla_low of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                sla_low is not None and sla_low > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `sla_low`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sla_low is not None and sla_low < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `sla_low`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._sla_low = sla_low

    @property
    def allow_anonymous_survey_repsonse(self):
        """Gets the allow_anonymous_survey_repsonse of this SystemSettings.  # noqa: E501

        Enable anyone with a link to the survey to answer a survey  # noqa: E501

        :return: The allow_anonymous_survey_repsonse of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_anonymous_survey_repsonse

    @allow_anonymous_survey_repsonse.setter
    def allow_anonymous_survey_repsonse(self, allow_anonymous_survey_repsonse):
        """Sets the allow_anonymous_survey_repsonse of this SystemSettings.

        Enable anyone with a link to the survey to answer a survey  # noqa: E501

        :param allow_anonymous_survey_repsonse: The allow_anonymous_survey_repsonse of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._allow_anonymous_survey_repsonse = allow_anonymous_survey_repsonse

    @property
    def credentials(self):
        """Gets the credentials of this SystemSettings.  # noqa: E501


        :return: The credentials of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this SystemSettings.


        :param credentials: The credentials of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                credentials is not None and len(credentials) > 3000):
            raise ValueError("Invalid value for `credentials`, length must be less than or equal to `3000`")  # noqa: E501

        self._credentials = credentials

    @property
    def disclaimer(self):
        """Gets the disclaimer of this SystemSettings.  # noqa: E501

        Include this custom disclaimer on all notifications and generated reports  # noqa: E501

        :return: The disclaimer of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._disclaimer

    @disclaimer.setter
    def disclaimer(self, disclaimer):
        """Sets the disclaimer of this SystemSettings.

        Include this custom disclaimer on all notifications and generated reports  # noqa: E501

        :param disclaimer: The disclaimer of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                disclaimer is not None and len(disclaimer) > 3000):
            raise ValueError("Invalid value for `disclaimer`, length must be less than or equal to `3000`")  # noqa: E501

        self._disclaimer = disclaimer

    @property
    def column_widths(self):
        """Gets the column_widths of this SystemSettings.  # noqa: E501


        :return: The column_widths of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._column_widths

    @column_widths.setter
    def column_widths(self, column_widths):
        """Sets the column_widths of this SystemSettings.


        :param column_widths: The column_widths of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                column_widths is not None and len(column_widths) > 1500):
            raise ValueError("Invalid value for `column_widths`, length must be less than or equal to `1500`")  # noqa: E501

        self._column_widths = column_widths

    @property
    def drive_folder_id(self):
        """Gets the drive_folder_id of this SystemSettings.  # noqa: E501


        :return: The drive_folder_id of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._drive_folder_id

    @drive_folder_id.setter
    def drive_folder_id(self, drive_folder_id):
        """Sets the drive_folder_id of this SystemSettings.


        :param drive_folder_id: The drive_folder_id of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                drive_folder_id is not None and len(drive_folder_id) > 100):
            raise ValueError("Invalid value for `drive_folder_id`, length must be less than or equal to `100`")  # noqa: E501

        self._drive_folder_id = drive_folder_id

    @property
    def email_address(self):
        """Gets the email_address of this SystemSettings.  # noqa: E501


        :return: The email_address of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this SystemSettings.


        :param email_address: The email_address of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email_address is not None and len(email_address) > 100):
            raise ValueError("Invalid value for `email_address`, length must be less than or equal to `100`")  # noqa: E501

        self._email_address = email_address

    @property
    def risk_acceptance_form_default_days(self):
        """Gets the risk_acceptance_form_default_days of this SystemSettings.  # noqa: E501

        Default expiry period for risk acceptance form.  # noqa: E501

        :return: The risk_acceptance_form_default_days of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._risk_acceptance_form_default_days

    @risk_acceptance_form_default_days.setter
    def risk_acceptance_form_default_days(self, risk_acceptance_form_default_days):
        """Sets the risk_acceptance_form_default_days of this SystemSettings.

        Default expiry period for risk acceptance form.  # noqa: E501

        :param risk_acceptance_form_default_days: The risk_acceptance_form_default_days of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                risk_acceptance_form_default_days is not None and risk_acceptance_form_default_days > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `risk_acceptance_form_default_days`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                risk_acceptance_form_default_days is not None and risk_acceptance_form_default_days < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `risk_acceptance_form_default_days`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._risk_acceptance_form_default_days = risk_acceptance_form_default_days

    @property
    def risk_acceptance_notify_before_expiration(self):
        """Gets the risk_acceptance_notify_before_expiration of this SystemSettings.  # noqa: E501

        Notify X days before risk acceptance expires. Leave empty to disable.  # noqa: E501

        :return: The risk_acceptance_notify_before_expiration of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._risk_acceptance_notify_before_expiration

    @risk_acceptance_notify_before_expiration.setter
    def risk_acceptance_notify_before_expiration(self, risk_acceptance_notify_before_expiration):
        """Sets the risk_acceptance_notify_before_expiration of this SystemSettings.

        Notify X days before risk acceptance expires. Leave empty to disable.  # noqa: E501

        :param risk_acceptance_notify_before_expiration: The risk_acceptance_notify_before_expiration of this SystemSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                risk_acceptance_notify_before_expiration is not None and risk_acceptance_notify_before_expiration > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `risk_acceptance_notify_before_expiration`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                risk_acceptance_notify_before_expiration is not None and risk_acceptance_notify_before_expiration < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `risk_acceptance_notify_before_expiration`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._risk_acceptance_notify_before_expiration = risk_acceptance_notify_before_expiration

    @property
    def enable_credentials(self):
        """Gets the enable_credentials of this SystemSettings.  # noqa: E501

        With this setting turned off, credentials will be disabled in the user interface.  # noqa: E501

        :return: The enable_credentials of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_credentials

    @enable_credentials.setter
    def enable_credentials(self, enable_credentials):
        """Sets the enable_credentials of this SystemSettings.

        With this setting turned off, credentials will be disabled in the user interface.  # noqa: E501

        :param enable_credentials: The enable_credentials of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_credentials = enable_credentials

    @property
    def enable_questionnaires(self):
        """Gets the enable_questionnaires of this SystemSettings.  # noqa: E501

        With this setting turned off, questionnaires will be disabled in the user interface.  # noqa: E501

        :return: The enable_questionnaires of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_questionnaires

    @enable_questionnaires.setter
    def enable_questionnaires(self, enable_questionnaires):
        """Sets the enable_questionnaires of this SystemSettings.

        With this setting turned off, questionnaires will be disabled in the user interface.  # noqa: E501

        :param enable_questionnaires: The enable_questionnaires of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_questionnaires = enable_questionnaires

    @property
    def enable_checklists(self):
        """Gets the enable_checklists of this SystemSettings.  # noqa: E501

        With this setting turned off, checklists will be disabled in the user interface.  # noqa: E501

        :return: The enable_checklists of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_checklists

    @enable_checklists.setter
    def enable_checklists(self, enable_checklists):
        """Sets the enable_checklists of this SystemSettings.

        With this setting turned off, checklists will be disabled in the user interface.  # noqa: E501

        :param enable_checklists: The enable_checklists of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_checklists = enable_checklists

    @property
    def enable_endpoint_metadata_import(self):
        """Gets the enable_endpoint_metadata_import of this SystemSettings.  # noqa: E501

        With this setting turned off, endpoint metadata import will be disabled in the user interface.  # noqa: E501

        :return: The enable_endpoint_metadata_import of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_endpoint_metadata_import

    @enable_endpoint_metadata_import.setter
    def enable_endpoint_metadata_import(self, enable_endpoint_metadata_import):
        """Sets the enable_endpoint_metadata_import of this SystemSettings.

        With this setting turned off, endpoint metadata import will be disabled in the user interface.  # noqa: E501

        :param enable_endpoint_metadata_import: The enable_endpoint_metadata_import of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_endpoint_metadata_import = enable_endpoint_metadata_import

    @property
    def enable_google_sheets(self):
        """Gets the enable_google_sheets of this SystemSettings.  # noqa: E501

        With this setting turned off, the Google sheets integration will be disabled in the user interface.  # noqa: E501

        :return: The enable_google_sheets of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_google_sheets

    @enable_google_sheets.setter
    def enable_google_sheets(self, enable_google_sheets):
        """Sets the enable_google_sheets of this SystemSettings.

        With this setting turned off, the Google sheets integration will be disabled in the user interface.  # noqa: E501

        :param enable_google_sheets: The enable_google_sheets of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_google_sheets = enable_google_sheets

    @property
    def enable_rules_framework(self):
        """Gets the enable_rules_framework of this SystemSettings.  # noqa: E501

        With this setting turned off, the rules framwork will be disabled in the user interface.  # noqa: E501

        :return: The enable_rules_framework of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_rules_framework

    @enable_rules_framework.setter
    def enable_rules_framework(self, enable_rules_framework):
        """Sets the enable_rules_framework of this SystemSettings.

        With this setting turned off, the rules framwork will be disabled in the user interface.  # noqa: E501

        :param enable_rules_framework: The enable_rules_framework of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_rules_framework = enable_rules_framework

    @property
    def enable_user_profile_editable(self):
        """Gets the enable_user_profile_editable of this SystemSettings.  # noqa: E501

        When turned on users can edit their profiles  # noqa: E501

        :return: The enable_user_profile_editable of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_user_profile_editable

    @enable_user_profile_editable.setter
    def enable_user_profile_editable(self, enable_user_profile_editable):
        """Sets the enable_user_profile_editable of this SystemSettings.

        When turned on users can edit their profiles  # noqa: E501

        :param enable_user_profile_editable: The enable_user_profile_editable of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_user_profile_editable = enable_user_profile_editable

    @property
    def enable_product_tracking_files(self):
        """Gets the enable_product_tracking_files of this SystemSettings.  # noqa: E501

        With this setting turned off, the product tracking files will be disabled in the user interface.  # noqa: E501

        :return: The enable_product_tracking_files of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_product_tracking_files

    @enable_product_tracking_files.setter
    def enable_product_tracking_files(self, enable_product_tracking_files):
        """Sets the enable_product_tracking_files of this SystemSettings.

        With this setting turned off, the product tracking files will be disabled in the user interface.  # noqa: E501

        :param enable_product_tracking_files: The enable_product_tracking_files of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_product_tracking_files = enable_product_tracking_files

    @property
    def enable_finding_groups(self):
        """Gets the enable_finding_groups of this SystemSettings.  # noqa: E501

        With this setting turned off, the Finding Groups will be disabled.  # noqa: E501

        :return: The enable_finding_groups of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_finding_groups

    @enable_finding_groups.setter
    def enable_finding_groups(self, enable_finding_groups):
        """Sets the enable_finding_groups of this SystemSettings.

        With this setting turned off, the Finding Groups will be disabled.  # noqa: E501

        :param enable_finding_groups: The enable_finding_groups of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_finding_groups = enable_finding_groups

    @property
    def default_group_email_pattern(self):
        """Gets the default_group_email_pattern of this SystemSettings.  # noqa: E501

        New users will only be assigned to the default group, when their email address matches this regex pattern. This is optional condition.  # noqa: E501

        :return: The default_group_email_pattern of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._default_group_email_pattern

    @default_group_email_pattern.setter
    def default_group_email_pattern(self, default_group_email_pattern):
        """Sets the default_group_email_pattern of this SystemSettings.

        New users will only be assigned to the default group, when their email address matches this regex pattern. This is optional condition.  # noqa: E501

        :param default_group_email_pattern: The default_group_email_pattern of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                default_group_email_pattern is not None and len(default_group_email_pattern) > 200):
            raise ValueError("Invalid value for `default_group_email_pattern`, length must be less than or equal to `200`")  # noqa: E501

        self._default_group_email_pattern = default_group_email_pattern

    @property
    def staff_user_email_pattern(self):
        """Gets the staff_user_email_pattern of this SystemSettings.  # noqa: E501

        When the email address of a new user created by OAuth2 matches this regex pattern, their is_staff flag will be set to True.  # noqa: E501

        :return: The staff_user_email_pattern of this SystemSettings.  # noqa: E501
        :rtype: str
        """
        return self._staff_user_email_pattern

    @staff_user_email_pattern.setter
    def staff_user_email_pattern(self, staff_user_email_pattern):
        """Sets the staff_user_email_pattern of this SystemSettings.

        When the email address of a new user created by OAuth2 matches this regex pattern, their is_staff flag will be set to True.  # noqa: E501

        :param staff_user_email_pattern: The staff_user_email_pattern of this SystemSettings.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                staff_user_email_pattern is not None and len(staff_user_email_pattern) > 200):
            raise ValueError("Invalid value for `staff_user_email_pattern`, length must be less than or equal to `200`")  # noqa: E501

        self._staff_user_email_pattern = staff_user_email_pattern

    @property
    def default_group(self):
        """Gets the default_group of this SystemSettings.  # noqa: E501

        New users will be assigned to this group.  # noqa: E501

        :return: The default_group of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_group

    @default_group.setter
    def default_group(self, default_group):
        """Sets the default_group of this SystemSettings.

        New users will be assigned to this group.  # noqa: E501

        :param default_group: The default_group of this SystemSettings.  # noqa: E501
        :type: int
        """

        self._default_group = default_group

    @property
    def default_group_role(self):
        """Gets the default_group_role of this SystemSettings.  # noqa: E501

        New users will be assigned to their default group with this role.  # noqa: E501

        :return: The default_group_role of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_group_role

    @default_group_role.setter
    def default_group_role(self, default_group_role):
        """Sets the default_group_role of this SystemSettings.

        New users will be assigned to their default group with this role.  # noqa: E501

        :param default_group_role: The default_group_role of this SystemSettings.  # noqa: E501
        :type: int
        """

        self._default_group_role = default_group_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemSettings):
            return True

        return self.to_dict() != other.to_dict()
