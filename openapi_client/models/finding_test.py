# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class FindingTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'title': 'str',
        'test_type': 'FindingTestType',
        'engagement': 'FindingEngagement',
        'environment': 'FindingEnvironment',
        'branch_tag': 'str',
        'build_id': 'str',
        'commit_hash': 'str',
        'version': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'test_type': 'test_type',
        'engagement': 'engagement',
        'environment': 'environment',
        'branch_tag': 'branch_tag',
        'build_id': 'build_id',
        'commit_hash': 'commit_hash',
        'version': 'version'
    }

    def __init__(self, id=None, title=None, test_type=None, engagement=None, environment=None, branch_tag=None, build_id=None, commit_hash=None, version=None, local_vars_configuration=None):  # noqa: E501
        """FindingTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._title = None
        self._test_type = None
        self._engagement = None
        self._environment = None
        self._branch_tag = None
        self._build_id = None
        self._commit_hash = None
        self._version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.title = title
        if test_type is not None:
            self.test_type = test_type
        if engagement is not None:
            self.engagement = engagement
        if environment is not None:
            self.environment = environment
        self.branch_tag = branch_tag
        self.build_id = build_id
        self.commit_hash = commit_hash
        self.version = version

    @property
    def id(self):
        """Gets the id of this FindingTest.  # noqa: E501


        :return: The id of this FindingTest.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FindingTest.


        :param id: The id of this FindingTest.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this FindingTest.  # noqa: E501


        :return: The title of this FindingTest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FindingTest.


        :param title: The title of this FindingTest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 255):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")  # noqa: E501

        self._title = title

    @property
    def test_type(self):
        """Gets the test_type of this FindingTest.  # noqa: E501


        :return: The test_type of this FindingTest.  # noqa: E501
        :rtype: FindingTestType
        """
        return self._test_type

    @test_type.setter
    def test_type(self, test_type):
        """Sets the test_type of this FindingTest.


        :param test_type: The test_type of this FindingTest.  # noqa: E501
        :type: FindingTestType
        """

        self._test_type = test_type

    @property
    def engagement(self):
        """Gets the engagement of this FindingTest.  # noqa: E501


        :return: The engagement of this FindingTest.  # noqa: E501
        :rtype: FindingEngagement
        """
        return self._engagement

    @engagement.setter
    def engagement(self, engagement):
        """Sets the engagement of this FindingTest.


        :param engagement: The engagement of this FindingTest.  # noqa: E501
        :type: FindingEngagement
        """

        self._engagement = engagement

    @property
    def environment(self):
        """Gets the environment of this FindingTest.  # noqa: E501


        :return: The environment of this FindingTest.  # noqa: E501
        :rtype: FindingEnvironment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this FindingTest.


        :param environment: The environment of this FindingTest.  # noqa: E501
        :type: FindingEnvironment
        """

        self._environment = environment

    @property
    def branch_tag(self):
        """Gets the branch_tag of this FindingTest.  # noqa: E501

        Tag or branch that was tested, a reimport may update this field.  # noqa: E501

        :return: The branch_tag of this FindingTest.  # noqa: E501
        :rtype: str
        """
        return self._branch_tag

    @branch_tag.setter
    def branch_tag(self, branch_tag):
        """Sets the branch_tag of this FindingTest.

        Tag or branch that was tested, a reimport may update this field.  # noqa: E501

        :param branch_tag: The branch_tag of this FindingTest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                branch_tag is not None and len(branch_tag) > 150):
            raise ValueError("Invalid value for `branch_tag`, length must be less than or equal to `150`")  # noqa: E501

        self._branch_tag = branch_tag

    @property
    def build_id(self):
        """Gets the build_id of this FindingTest.  # noqa: E501

        Build ID that was tested, a reimport may update this field.  # noqa: E501

        :return: The build_id of this FindingTest.  # noqa: E501
        :rtype: str
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this FindingTest.

        Build ID that was tested, a reimport may update this field.  # noqa: E501

        :param build_id: The build_id of this FindingTest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                build_id is not None and len(build_id) > 150):
            raise ValueError("Invalid value for `build_id`, length must be less than or equal to `150`")  # noqa: E501

        self._build_id = build_id

    @property
    def commit_hash(self):
        """Gets the commit_hash of this FindingTest.  # noqa: E501

        Commit hash tested, a reimport may update this field.  # noqa: E501

        :return: The commit_hash of this FindingTest.  # noqa: E501
        :rtype: str
        """
        return self._commit_hash

    @commit_hash.setter
    def commit_hash(self, commit_hash):
        """Sets the commit_hash of this FindingTest.

        Commit hash tested, a reimport may update this field.  # noqa: E501

        :param commit_hash: The commit_hash of this FindingTest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                commit_hash is not None and len(commit_hash) > 150):
            raise ValueError("Invalid value for `commit_hash`, length must be less than or equal to `150`")  # noqa: E501

        self._commit_hash = commit_hash

    @property
    def version(self):
        """Gets the version of this FindingTest.  # noqa: E501


        :return: The version of this FindingTest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FindingTest.


        :param version: The version of this FindingTest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) > 100):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `100`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindingTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FindingTest):
            return True

        return self.to_dict() != other.to_dict()
