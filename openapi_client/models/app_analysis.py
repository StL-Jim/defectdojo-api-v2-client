# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AppAnalysis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'tags': 'list[str]',
        'name': 'str',
        'confidence': 'int',
        'version': 'str',
        'icon': 'str',
        'website': 'str',
        'website_found': 'str',
        'created': 'datetime',
        'product': 'int',
        'user': 'int'
    }

    attribute_map = {
        'id': 'id',
        'tags': 'tags',
        'name': 'name',
        'confidence': 'confidence',
        'version': 'version',
        'icon': 'icon',
        'website': 'website',
        'website_found': 'website_found',
        'created': 'created',
        'product': 'product',
        'user': 'user'
    }

    def __init__(self, id=None, tags=None, name=None, confidence=None, version=None, icon=None, website=None, website_found=None, created=None, product=None, user=None, local_vars_configuration=None):  # noqa: E501
        """AppAnalysis - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tags = None
        self._name = None
        self._confidence = None
        self._version = None
        self._icon = None
        self._website = None
        self._website_found = None
        self._created = None
        self._product = None
        self._user = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if tags is not None:
            self.tags = tags
        self.name = name
        self.confidence = confidence
        self.version = version
        self.icon = icon
        self.website = website
        self.website_found = website_found
        if created is not None:
            self.created = created
        self.product = product
        self.user = user

    @property
    def id(self):
        """Gets the id of this AppAnalysis.  # noqa: E501


        :return: The id of this AppAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppAnalysis.


        :param id: The id of this AppAnalysis.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tags(self):
        """Gets the tags of this AppAnalysis.  # noqa: E501


        :return: The tags of this AppAnalysis.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AppAnalysis.


        :param tags: The tags of this AppAnalysis.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def name(self):
        """Gets the name of this AppAnalysis.  # noqa: E501


        :return: The name of this AppAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppAnalysis.


        :param name: The name of this AppAnalysis.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def confidence(self):
        """Gets the confidence of this AppAnalysis.  # noqa: E501


        :return: The confidence of this AppAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this AppAnalysis.


        :param confidence: The confidence of this AppAnalysis.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                confidence is not None and confidence > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                confidence is not None and confidence < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._confidence = confidence

    @property
    def version(self):
        """Gets the version of this AppAnalysis.  # noqa: E501


        :return: The version of this AppAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AppAnalysis.


        :param version: The version of this AppAnalysis.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) > 200):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `200`")  # noqa: E501

        self._version = version

    @property
    def icon(self):
        """Gets the icon of this AppAnalysis.  # noqa: E501


        :return: The icon of this AppAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this AppAnalysis.


        :param icon: The icon of this AppAnalysis.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                icon is not None and len(icon) > 200):
            raise ValueError("Invalid value for `icon`, length must be less than or equal to `200`")  # noqa: E501

        self._icon = icon

    @property
    def website(self):
        """Gets the website of this AppAnalysis.  # noqa: E501


        :return: The website of this AppAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this AppAnalysis.


        :param website: The website of this AppAnalysis.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                website is not None and len(website) > 400):
            raise ValueError("Invalid value for `website`, length must be less than or equal to `400`")  # noqa: E501

        self._website = website

    @property
    def website_found(self):
        """Gets the website_found of this AppAnalysis.  # noqa: E501


        :return: The website_found of this AppAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._website_found

    @website_found.setter
    def website_found(self, website_found):
        """Sets the website_found of this AppAnalysis.


        :param website_found: The website_found of this AppAnalysis.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                website_found is not None and len(website_found) > 400):
            raise ValueError("Invalid value for `website_found`, length must be less than or equal to `400`")  # noqa: E501

        self._website_found = website_found

    @property
    def created(self):
        """Gets the created of this AppAnalysis.  # noqa: E501


        :return: The created of this AppAnalysis.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AppAnalysis.


        :param created: The created of this AppAnalysis.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def product(self):
        """Gets the product of this AppAnalysis.  # noqa: E501


        :return: The product of this AppAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this AppAnalysis.


        :param product: The product of this AppAnalysis.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and product is None:  # noqa: E501
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def user(self):
        """Gets the user of this AppAnalysis.  # noqa: E501


        :return: The user of this AppAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AppAnalysis.


        :param user: The user of this AppAnalysis.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppAnalysis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppAnalysis):
            return True

        return self.to_dict() != other.to_dict()
