# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse20011(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'tags': 'list[str]',
        'request_response': 'BurpRawRequestResponse',
        'accepted_risks': 'list[RiskAcceptance]',
        'push_to_jira': 'bool',
        'age': 'int',
        'sla_days_remaining': 'int',
        'finding_meta': 'list[FindingMeta]',
        'related_fields': 'FindingRelatedFields',
        'jira_creation': 'datetime',
        'jira_change': 'datetime',
        'display_status': 'str',
        'finding_groups': 'list[FindingGroup]',
        'title': 'str',
        'date': 'date',
        'sla_start_date': 'date',
        'cwe': 'int',
        'cve': 'str',
        'cvssv3': 'str',
        'cvssv3_score': 'float',
        'url': 'str',
        'severity': 'str',
        'description': 'str',
        'mitigation': 'str',
        'impact': 'str',
        'steps_to_reproduce': 'str',
        'severity_justification': 'str',
        'references': 'str',
        'active': 'bool',
        'verified': 'bool',
        'false_p': 'bool',
        'duplicate': 'bool',
        'out_of_scope': 'bool',
        'risk_accepted': 'bool',
        'under_review': 'bool',
        'last_status_update': 'datetime',
        'under_defect_review': 'bool',
        'is_mitigated': 'bool',
        'thread_id': 'int',
        'mitigated': 'datetime',
        'numerical_severity': 'str',
        'last_reviewed': 'datetime',
        'param': 'str',
        'payload': 'str',
        'hash_code': 'str',
        'line': 'int',
        'file_path': 'str',
        'component_name': 'str',
        'component_version': 'str',
        'static_finding': 'bool',
        'dynamic_finding': 'bool',
        'created': 'datetime',
        'scanner_confidence': 'int',
        'unique_id_from_tool': 'str',
        'vuln_id_from_tool': 'str',
        'sast_source_object': 'str',
        'sast_sink_object': 'str',
        'sast_source_line': 'int',
        'sast_source_file_path': 'str',
        'nb_occurences': 'int',
        'publish_date': 'date',
        'service': 'str',
        'test': 'int',
        'duplicate_finding': 'int',
        'review_requested_by': 'int',
        'defect_review_requested_by': 'int',
        'mitigated_by': 'int',
        'reporter': 'int',
        'last_reviewed_by': 'int',
        'sonarqube_issue': 'int',
        'endpoints': 'list[int]',
        'endpoint_status': 'list[int]',
        'reviewers': 'list[int]',
        'notes': 'list[Note]',
        'files': 'list[int]',
        'found_by': 'list[int]',
        'prefetch': 'InlineResponse20010Prefetch'
    }

    attribute_map = {
        'id': 'id',
        'tags': 'tags',
        'request_response': 'request_response',
        'accepted_risks': 'accepted_risks',
        'push_to_jira': 'push_to_jira',
        'age': 'age',
        'sla_days_remaining': 'sla_days_remaining',
        'finding_meta': 'finding_meta',
        'related_fields': 'related_fields',
        'jira_creation': 'jira_creation',
        'jira_change': 'jira_change',
        'display_status': 'display_status',
        'finding_groups': 'finding_groups',
        'title': 'title',
        'date': 'date',
        'sla_start_date': 'sla_start_date',
        'cwe': 'cwe',
        'cve': 'cve',
        'cvssv3': 'cvssv3',
        'cvssv3_score': 'cvssv3_score',
        'url': 'url',
        'severity': 'severity',
        'description': 'description',
        'mitigation': 'mitigation',
        'impact': 'impact',
        'steps_to_reproduce': 'steps_to_reproduce',
        'severity_justification': 'severity_justification',
        'references': 'references',
        'active': 'active',
        'verified': 'verified',
        'false_p': 'false_p',
        'duplicate': 'duplicate',
        'out_of_scope': 'out_of_scope',
        'risk_accepted': 'risk_accepted',
        'under_review': 'under_review',
        'last_status_update': 'last_status_update',
        'under_defect_review': 'under_defect_review',
        'is_mitigated': 'is_mitigated',
        'thread_id': 'thread_id',
        'mitigated': 'mitigated',
        'numerical_severity': 'numerical_severity',
        'last_reviewed': 'last_reviewed',
        'param': 'param',
        'payload': 'payload',
        'hash_code': 'hash_code',
        'line': 'line',
        'file_path': 'file_path',
        'component_name': 'component_name',
        'component_version': 'component_version',
        'static_finding': 'static_finding',
        'dynamic_finding': 'dynamic_finding',
        'created': 'created',
        'scanner_confidence': 'scanner_confidence',
        'unique_id_from_tool': 'unique_id_from_tool',
        'vuln_id_from_tool': 'vuln_id_from_tool',
        'sast_source_object': 'sast_source_object',
        'sast_sink_object': 'sast_sink_object',
        'sast_source_line': 'sast_source_line',
        'sast_source_file_path': 'sast_source_file_path',
        'nb_occurences': 'nb_occurences',
        'publish_date': 'publish_date',
        'service': 'service',
        'test': 'test',
        'duplicate_finding': 'duplicate_finding',
        'review_requested_by': 'review_requested_by',
        'defect_review_requested_by': 'defect_review_requested_by',
        'mitigated_by': 'mitigated_by',
        'reporter': 'reporter',
        'last_reviewed_by': 'last_reviewed_by',
        'sonarqube_issue': 'sonarqube_issue',
        'endpoints': 'endpoints',
        'endpoint_status': 'endpoint_status',
        'reviewers': 'reviewers',
        'notes': 'notes',
        'files': 'files',
        'found_by': 'found_by',
        'prefetch': 'prefetch'
    }

    def __init__(self, id=None, tags=None, request_response=None, accepted_risks=None, push_to_jira=False, age=None, sla_days_remaining=None, finding_meta=None, related_fields=None, jira_creation=None, jira_change=None, display_status=None, finding_groups=None, title=None, date=None, sla_start_date=None, cwe=None, cve=None, cvssv3=None, cvssv3_score=None, url=None, severity=None, description=None, mitigation=None, impact=None, steps_to_reproduce=None, severity_justification=None, references=None, active=None, verified=None, false_p=None, duplicate=None, out_of_scope=None, risk_accepted=None, under_review=None, last_status_update=None, under_defect_review=None, is_mitigated=None, thread_id=None, mitigated=None, numerical_severity=None, last_reviewed=None, param=None, payload=None, hash_code=None, line=None, file_path=None, component_name=None, component_version=None, static_finding=None, dynamic_finding=None, created=None, scanner_confidence=None, unique_id_from_tool=None, vuln_id_from_tool=None, sast_source_object=None, sast_sink_object=None, sast_source_line=None, sast_source_file_path=None, nb_occurences=None, publish_date=None, service=None, test=None, duplicate_finding=None, review_requested_by=None, defect_review_requested_by=None, mitigated_by=None, reporter=None, last_reviewed_by=None, sonarqube_issue=None, endpoints=None, endpoint_status=None, reviewers=None, notes=None, files=None, found_by=None, prefetch=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20011 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tags = None
        self._request_response = None
        self._accepted_risks = None
        self._push_to_jira = None
        self._age = None
        self._sla_days_remaining = None
        self._finding_meta = None
        self._related_fields = None
        self._jira_creation = None
        self._jira_change = None
        self._display_status = None
        self._finding_groups = None
        self._title = None
        self._date = None
        self._sla_start_date = None
        self._cwe = None
        self._cve = None
        self._cvssv3 = None
        self._cvssv3_score = None
        self._url = None
        self._severity = None
        self._description = None
        self._mitigation = None
        self._impact = None
        self._steps_to_reproduce = None
        self._severity_justification = None
        self._references = None
        self._active = None
        self._verified = None
        self._false_p = None
        self._duplicate = None
        self._out_of_scope = None
        self._risk_accepted = None
        self._under_review = None
        self._last_status_update = None
        self._under_defect_review = None
        self._is_mitigated = None
        self._thread_id = None
        self._mitigated = None
        self._numerical_severity = None
        self._last_reviewed = None
        self._param = None
        self._payload = None
        self._hash_code = None
        self._line = None
        self._file_path = None
        self._component_name = None
        self._component_version = None
        self._static_finding = None
        self._dynamic_finding = None
        self._created = None
        self._scanner_confidence = None
        self._unique_id_from_tool = None
        self._vuln_id_from_tool = None
        self._sast_source_object = None
        self._sast_sink_object = None
        self._sast_source_line = None
        self._sast_source_file_path = None
        self._nb_occurences = None
        self._publish_date = None
        self._service = None
        self._test = None
        self._duplicate_finding = None
        self._review_requested_by = None
        self._defect_review_requested_by = None
        self._mitigated_by = None
        self._reporter = None
        self._last_reviewed_by = None
        self._sonarqube_issue = None
        self._endpoints = None
        self._endpoint_status = None
        self._reviewers = None
        self._notes = None
        self._files = None
        self._found_by = None
        self._prefetch = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if tags is not None:
            self.tags = tags
        if request_response is not None:
            self.request_response = request_response
        if accepted_risks is not None:
            self.accepted_risks = accepted_risks
        if push_to_jira is not None:
            self.push_to_jira = push_to_jira
        if age is not None:
            self.age = age
        if sla_days_remaining is not None:
            self.sla_days_remaining = sla_days_remaining
        if finding_meta is not None:
            self.finding_meta = finding_meta
        if related_fields is not None:
            self.related_fields = related_fields
        if jira_creation is not None:
            self.jira_creation = jira_creation
        if jira_change is not None:
            self.jira_change = jira_change
        if display_status is not None:
            self.display_status = display_status
        if finding_groups is not None:
            self.finding_groups = finding_groups
        self.title = title
        if date is not None:
            self.date = date
        self.sla_start_date = sla_start_date
        self.cwe = cwe
        self.cve = cve
        self.cvssv3 = cvssv3
        self.cvssv3_score = cvssv3_score
        if url is not None:
            self.url = url
        self.severity = severity
        self.description = description
        self.mitigation = mitigation
        self.impact = impact
        self.steps_to_reproduce = steps_to_reproduce
        self.severity_justification = severity_justification
        self.references = references
        if active is not None:
            self.active = active
        if verified is not None:
            self.verified = verified
        if false_p is not None:
            self.false_p = false_p
        if duplicate is not None:
            self.duplicate = duplicate
        if out_of_scope is not None:
            self.out_of_scope = out_of_scope
        if risk_accepted is not None:
            self.risk_accepted = risk_accepted
        if under_review is not None:
            self.under_review = under_review
        if last_status_update is not None:
            self.last_status_update = last_status_update
        if under_defect_review is not None:
            self.under_defect_review = under_defect_review
        if is_mitigated is not None:
            self.is_mitigated = is_mitigated
        if thread_id is not None:
            self.thread_id = thread_id
        if mitigated is not None:
            self.mitigated = mitigated
        self.numerical_severity = numerical_severity
        if last_reviewed is not None:
            self.last_reviewed = last_reviewed
        if param is not None:
            self.param = param
        if payload is not None:
            self.payload = payload
        if hash_code is not None:
            self.hash_code = hash_code
        self.line = line
        self.file_path = file_path
        self.component_name = component_name
        self.component_version = component_version
        if static_finding is not None:
            self.static_finding = static_finding
        if dynamic_finding is not None:
            self.dynamic_finding = dynamic_finding
        if created is not None:
            self.created = created
        if scanner_confidence is not None:
            self.scanner_confidence = scanner_confidence
        self.unique_id_from_tool = unique_id_from_tool
        self.vuln_id_from_tool = vuln_id_from_tool
        self.sast_source_object = sast_source_object
        self.sast_sink_object = sast_sink_object
        self.sast_source_line = sast_source_line
        self.sast_source_file_path = sast_source_file_path
        self.nb_occurences = nb_occurences
        self.publish_date = publish_date
        self.service = service
        if test is not None:
            self.test = test
        if duplicate_finding is not None:
            self.duplicate_finding = duplicate_finding
        self.review_requested_by = review_requested_by
        self.defect_review_requested_by = defect_review_requested_by
        if mitigated_by is not None:
            self.mitigated_by = mitigated_by
        if reporter is not None:
            self.reporter = reporter
        if last_reviewed_by is not None:
            self.last_reviewed_by = last_reviewed_by
        self.sonarqube_issue = sonarqube_issue
        if endpoints is not None:
            self.endpoints = endpoints
        if endpoint_status is not None:
            self.endpoint_status = endpoint_status
        if reviewers is not None:
            self.reviewers = reviewers
        if notes is not None:
            self.notes = notes
        if files is not None:
            self.files = files
        if found_by is not None:
            self.found_by = found_by
        if prefetch is not None:
            self.prefetch = prefetch

    @property
    def id(self):
        """Gets the id of this InlineResponse20011.  # noqa: E501


        :return: The id of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20011.


        :param id: The id of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tags(self):
        """Gets the tags of this InlineResponse20011.  # noqa: E501


        :return: The tags of this InlineResponse20011.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InlineResponse20011.


        :param tags: The tags of this InlineResponse20011.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def request_response(self):
        """Gets the request_response of this InlineResponse20011.  # noqa: E501


        :return: The request_response of this InlineResponse20011.  # noqa: E501
        :rtype: BurpRawRequestResponse
        """
        return self._request_response

    @request_response.setter
    def request_response(self, request_response):
        """Sets the request_response of this InlineResponse20011.


        :param request_response: The request_response of this InlineResponse20011.  # noqa: E501
        :type: BurpRawRequestResponse
        """

        self._request_response = request_response

    @property
    def accepted_risks(self):
        """Gets the accepted_risks of this InlineResponse20011.  # noqa: E501


        :return: The accepted_risks of this InlineResponse20011.  # noqa: E501
        :rtype: list[RiskAcceptance]
        """
        return self._accepted_risks

    @accepted_risks.setter
    def accepted_risks(self, accepted_risks):
        """Sets the accepted_risks of this InlineResponse20011.


        :param accepted_risks: The accepted_risks of this InlineResponse20011.  # noqa: E501
        :type: list[RiskAcceptance]
        """

        self._accepted_risks = accepted_risks

    @property
    def push_to_jira(self):
        """Gets the push_to_jira of this InlineResponse20011.  # noqa: E501


        :return: The push_to_jira of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._push_to_jira

    @push_to_jira.setter
    def push_to_jira(self, push_to_jira):
        """Sets the push_to_jira of this InlineResponse20011.


        :param push_to_jira: The push_to_jira of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._push_to_jira = push_to_jira

    @property
    def age(self):
        """Gets the age of this InlineResponse20011.  # noqa: E501


        :return: The age of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this InlineResponse20011.


        :param age: The age of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def sla_days_remaining(self):
        """Gets the sla_days_remaining of this InlineResponse20011.  # noqa: E501


        :return: The sla_days_remaining of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._sla_days_remaining

    @sla_days_remaining.setter
    def sla_days_remaining(self, sla_days_remaining):
        """Sets the sla_days_remaining of this InlineResponse20011.


        :param sla_days_remaining: The sla_days_remaining of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._sla_days_remaining = sla_days_remaining

    @property
    def finding_meta(self):
        """Gets the finding_meta of this InlineResponse20011.  # noqa: E501


        :return: The finding_meta of this InlineResponse20011.  # noqa: E501
        :rtype: list[FindingMeta]
        """
        return self._finding_meta

    @finding_meta.setter
    def finding_meta(self, finding_meta):
        """Sets the finding_meta of this InlineResponse20011.


        :param finding_meta: The finding_meta of this InlineResponse20011.  # noqa: E501
        :type: list[FindingMeta]
        """

        self._finding_meta = finding_meta

    @property
    def related_fields(self):
        """Gets the related_fields of this InlineResponse20011.  # noqa: E501


        :return: The related_fields of this InlineResponse20011.  # noqa: E501
        :rtype: FindingRelatedFields
        """
        return self._related_fields

    @related_fields.setter
    def related_fields(self, related_fields):
        """Sets the related_fields of this InlineResponse20011.


        :param related_fields: The related_fields of this InlineResponse20011.  # noqa: E501
        :type: FindingRelatedFields
        """

        self._related_fields = related_fields

    @property
    def jira_creation(self):
        """Gets the jira_creation of this InlineResponse20011.  # noqa: E501


        :return: The jira_creation of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._jira_creation

    @jira_creation.setter
    def jira_creation(self, jira_creation):
        """Sets the jira_creation of this InlineResponse20011.


        :param jira_creation: The jira_creation of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._jira_creation = jira_creation

    @property
    def jira_change(self):
        """Gets the jira_change of this InlineResponse20011.  # noqa: E501


        :return: The jira_change of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._jira_change

    @jira_change.setter
    def jira_change(self, jira_change):
        """Sets the jira_change of this InlineResponse20011.


        :param jira_change: The jira_change of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._jira_change = jira_change

    @property
    def display_status(self):
        """Gets the display_status of this InlineResponse20011.  # noqa: E501


        :return: The display_status of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._display_status

    @display_status.setter
    def display_status(self, display_status):
        """Sets the display_status of this InlineResponse20011.


        :param display_status: The display_status of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._display_status = display_status

    @property
    def finding_groups(self):
        """Gets the finding_groups of this InlineResponse20011.  # noqa: E501


        :return: The finding_groups of this InlineResponse20011.  # noqa: E501
        :rtype: list[FindingGroup]
        """
        return self._finding_groups

    @finding_groups.setter
    def finding_groups(self, finding_groups):
        """Sets the finding_groups of this InlineResponse20011.


        :param finding_groups: The finding_groups of this InlineResponse20011.  # noqa: E501
        :type: list[FindingGroup]
        """

        self._finding_groups = finding_groups

    @property
    def title(self):
        """Gets the title of this InlineResponse20011.  # noqa: E501

        A short description of the flaw.  # noqa: E501

        :return: The title of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse20011.

        A short description of the flaw.  # noqa: E501

        :param title: The title of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 511):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `511`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def date(self):
        """Gets the date of this InlineResponse20011.  # noqa: E501

        The date the flaw was discovered.  # noqa: E501

        :return: The date of this InlineResponse20011.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this InlineResponse20011.

        The date the flaw was discovered.  # noqa: E501

        :param date: The date of this InlineResponse20011.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def sla_start_date(self):
        """Gets the sla_start_date of this InlineResponse20011.  # noqa: E501

        (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.  # noqa: E501

        :return: The sla_start_date of this InlineResponse20011.  # noqa: E501
        :rtype: date
        """
        return self._sla_start_date

    @sla_start_date.setter
    def sla_start_date(self, sla_start_date):
        """Sets the sla_start_date of this InlineResponse20011.

        (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.  # noqa: E501

        :param sla_start_date: The sla_start_date of this InlineResponse20011.  # noqa: E501
        :type: date
        """

        self._sla_start_date = sla_start_date

    @property
    def cwe(self):
        """Gets the cwe of this InlineResponse20011.  # noqa: E501

        The CWE number associated with this flaw.  # noqa: E501

        :return: The cwe of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._cwe

    @cwe.setter
    def cwe(self, cwe):
        """Sets the cwe of this InlineResponse20011.

        The CWE number associated with this flaw.  # noqa: E501

        :param cwe: The cwe of this InlineResponse20011.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                cwe is not None and cwe > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `cwe`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cwe is not None and cwe < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `cwe`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._cwe = cwe

    @property
    def cve(self):
        """Gets the cve of this InlineResponse20011.  # noqa: E501

        The Common Vulnerabilities and Exposures (CVE) associated with this flaw.  # noqa: E501

        :return: The cve of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """Sets the cve of this InlineResponse20011.

        The Common Vulnerabilities and Exposures (CVE) associated with this flaw.  # noqa: E501

        :param cve: The cve of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                cve is not None and len(cve) > 28):
            raise ValueError("Invalid value for `cve`, length must be less than or equal to `28`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cve is not None and len(cve) < 1):
            raise ValueError("Invalid value for `cve`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cve is not None and not re.search(r'^[A-Z]{1,10}(-\d+)+$', cve)):  # noqa: E501
            raise ValueError(r"Invalid value for `cve`, must be a follow pattern or equal to `/^[A-Z]{1,10}(-\d+)+$/`")  # noqa: E501

        self._cve = cve

    @property
    def cvssv3(self):
        """Gets the cvssv3 of this InlineResponse20011.  # noqa: E501

        Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.  # noqa: E501

        :return: The cvssv3 of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._cvssv3

    @cvssv3.setter
    def cvssv3(self, cvssv3):
        """Sets the cvssv3 of this InlineResponse20011.

        Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.  # noqa: E501

        :param cvssv3: The cvssv3 of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                cvssv3 is not None and len(cvssv3) > 117):
            raise ValueError("Invalid value for `cvssv3`, length must be less than or equal to `117`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cvssv3 is not None and len(cvssv3) < 1):
            raise ValueError("Invalid value for `cvssv3`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cvssv3 is not None and not re.search(r'^AV:[NALP]|AC:[LH]|PR:[UNLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]', cvssv3)):  # noqa: E501
            raise ValueError(r"Invalid value for `cvssv3`, must be a follow pattern or equal to `/^AV:[NALP]|AC:[LH]|PR:[UNLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]/`")  # noqa: E501

        self._cvssv3 = cvssv3

    @property
    def cvssv3_score(self):
        """Gets the cvssv3_score of this InlineResponse20011.  # noqa: E501

        Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding  # noqa: E501

        :return: The cvssv3_score of this InlineResponse20011.  # noqa: E501
        :rtype: float
        """
        return self._cvssv3_score

    @cvssv3_score.setter
    def cvssv3_score(self, cvssv3_score):
        """Sets the cvssv3_score of this InlineResponse20011.

        Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding  # noqa: E501

        :param cvssv3_score: The cvssv3_score of this InlineResponse20011.  # noqa: E501
        :type: float
        """

        self._cvssv3_score = cvssv3_score

    @property
    def url(self):
        """Gets the url of this InlineResponse20011.  # noqa: E501

        External reference that provides more information about this flaw.  # noqa: E501

        :return: The url of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse20011.

        External reference that provides more information about this flaw.  # noqa: E501

        :param url: The url of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) < 1):
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501

        self._url = url

    @property
    def severity(self):
        """Gets the severity of this InlineResponse20011.  # noqa: E501

        The severity level of this flaw (Critical, High, Medium, Low, Informational).  # noqa: E501

        :return: The severity of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this InlineResponse20011.

        The severity level of this flaw (Critical, High, Medium, Low, Informational).  # noqa: E501

        :param severity: The severity of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and severity is None:  # noqa: E501
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                severity is not None and len(severity) > 200):
            raise ValueError("Invalid value for `severity`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                severity is not None and len(severity) < 1):
            raise ValueError("Invalid value for `severity`, length must be greater than or equal to `1`")  # noqa: E501

        self._severity = severity

    @property
    def description(self):
        """Gets the description of this InlineResponse20011.  # noqa: E501

        Longer more descriptive information about the flaw.  # noqa: E501

        :return: The description of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20011.

        Longer more descriptive information about the flaw.  # noqa: E501

        :param description: The description of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def mitigation(self):
        """Gets the mitigation of this InlineResponse20011.  # noqa: E501

        Text describing how to best fix the flaw.  # noqa: E501

        :return: The mitigation of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._mitigation

    @mitigation.setter
    def mitigation(self, mitigation):
        """Sets the mitigation of this InlineResponse20011.

        Text describing how to best fix the flaw.  # noqa: E501

        :param mitigation: The mitigation of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._mitigation = mitigation

    @property
    def impact(self):
        """Gets the impact of this InlineResponse20011.  # noqa: E501

        Text describing the impact this flaw has on systems, products, enterprise, etc.  # noqa: E501

        :return: The impact of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """Sets the impact of this InlineResponse20011.

        Text describing the impact this flaw has on systems, products, enterprise, etc.  # noqa: E501

        :param impact: The impact of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._impact = impact

    @property
    def steps_to_reproduce(self):
        """Gets the steps_to_reproduce of this InlineResponse20011.  # noqa: E501

        Text describing the steps that must be followed in order to reproduce the flaw / bug.  # noqa: E501

        :return: The steps_to_reproduce of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._steps_to_reproduce

    @steps_to_reproduce.setter
    def steps_to_reproduce(self, steps_to_reproduce):
        """Sets the steps_to_reproduce of this InlineResponse20011.

        Text describing the steps that must be followed in order to reproduce the flaw / bug.  # noqa: E501

        :param steps_to_reproduce: The steps_to_reproduce of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._steps_to_reproduce = steps_to_reproduce

    @property
    def severity_justification(self):
        """Gets the severity_justification of this InlineResponse20011.  # noqa: E501

        Text describing why a certain severity was associated with this flaw.  # noqa: E501

        :return: The severity_justification of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._severity_justification

    @severity_justification.setter
    def severity_justification(self, severity_justification):
        """Sets the severity_justification of this InlineResponse20011.

        Text describing why a certain severity was associated with this flaw.  # noqa: E501

        :param severity_justification: The severity_justification of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._severity_justification = severity_justification

    @property
    def references(self):
        """Gets the references of this InlineResponse20011.  # noqa: E501

        The external documentation available for this flaw.  # noqa: E501

        :return: The references of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this InlineResponse20011.

        The external documentation available for this flaw.  # noqa: E501

        :param references: The references of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._references = references

    @property
    def active(self):
        """Gets the active of this InlineResponse20011.  # noqa: E501

        Denotes if this flaw is active or not.  # noqa: E501

        :return: The active of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InlineResponse20011.

        Denotes if this flaw is active or not.  # noqa: E501

        :param active: The active of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def verified(self):
        """Gets the verified of this InlineResponse20011.  # noqa: E501

        Denotes if this flaw has been manually verified by the tester.  # noqa: E501

        :return: The verified of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this InlineResponse20011.

        Denotes if this flaw has been manually verified by the tester.  # noqa: E501

        :param verified: The verified of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def false_p(self):
        """Gets the false_p of this InlineResponse20011.  # noqa: E501

        Denotes if this flaw has been deemed a false positive by the tester.  # noqa: E501

        :return: The false_p of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._false_p

    @false_p.setter
    def false_p(self, false_p):
        """Sets the false_p of this InlineResponse20011.

        Denotes if this flaw has been deemed a false positive by the tester.  # noqa: E501

        :param false_p: The false_p of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._false_p = false_p

    @property
    def duplicate(self):
        """Gets the duplicate of this InlineResponse20011.  # noqa: E501

        Denotes if this flaw is a duplicate of other flaws reported.  # noqa: E501

        :return: The duplicate of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._duplicate

    @duplicate.setter
    def duplicate(self, duplicate):
        """Sets the duplicate of this InlineResponse20011.

        Denotes if this flaw is a duplicate of other flaws reported.  # noqa: E501

        :param duplicate: The duplicate of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._duplicate = duplicate

    @property
    def out_of_scope(self):
        """Gets the out_of_scope of this InlineResponse20011.  # noqa: E501

        Denotes if this flaw falls outside the scope of the test and/or engagement.  # noqa: E501

        :return: The out_of_scope of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._out_of_scope

    @out_of_scope.setter
    def out_of_scope(self, out_of_scope):
        """Sets the out_of_scope of this InlineResponse20011.

        Denotes if this flaw falls outside the scope of the test and/or engagement.  # noqa: E501

        :param out_of_scope: The out_of_scope of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._out_of_scope = out_of_scope

    @property
    def risk_accepted(self):
        """Gets the risk_accepted of this InlineResponse20011.  # noqa: E501

        Denotes if this finding has been marked as an accepted risk.  # noqa: E501

        :return: The risk_accepted of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._risk_accepted

    @risk_accepted.setter
    def risk_accepted(self, risk_accepted):
        """Sets the risk_accepted of this InlineResponse20011.

        Denotes if this finding has been marked as an accepted risk.  # noqa: E501

        :param risk_accepted: The risk_accepted of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._risk_accepted = risk_accepted

    @property
    def under_review(self):
        """Gets the under_review of this InlineResponse20011.  # noqa: E501

        Denotes is this flaw is currently being reviewed.  # noqa: E501

        :return: The under_review of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._under_review

    @under_review.setter
    def under_review(self, under_review):
        """Sets the under_review of this InlineResponse20011.

        Denotes is this flaw is currently being reviewed.  # noqa: E501

        :param under_review: The under_review of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._under_review = under_review

    @property
    def last_status_update(self):
        """Gets the last_status_update of this InlineResponse20011.  # noqa: E501

        Timestamp of latest status update (change in status related fields).  # noqa: E501

        :return: The last_status_update of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._last_status_update

    @last_status_update.setter
    def last_status_update(self, last_status_update):
        """Sets the last_status_update of this InlineResponse20011.

        Timestamp of latest status update (change in status related fields).  # noqa: E501

        :param last_status_update: The last_status_update of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._last_status_update = last_status_update

    @property
    def under_defect_review(self):
        """Gets the under_defect_review of this InlineResponse20011.  # noqa: E501

        Denotes if this finding is under defect review.  # noqa: E501

        :return: The under_defect_review of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._under_defect_review

    @under_defect_review.setter
    def under_defect_review(self, under_defect_review):
        """Sets the under_defect_review of this InlineResponse20011.

        Denotes if this finding is under defect review.  # noqa: E501

        :param under_defect_review: The under_defect_review of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._under_defect_review = under_defect_review

    @property
    def is_mitigated(self):
        """Gets the is_mitigated of this InlineResponse20011.  # noqa: E501

        Denotes if this flaw has been fixed.  # noqa: E501

        :return: The is_mitigated of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._is_mitigated

    @is_mitigated.setter
    def is_mitigated(self, is_mitigated):
        """Sets the is_mitigated of this InlineResponse20011.

        Denotes if this flaw has been fixed.  # noqa: E501

        :param is_mitigated: The is_mitigated of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._is_mitigated = is_mitigated

    @property
    def thread_id(self):
        """Gets the thread_id of this InlineResponse20011.  # noqa: E501


        :return: The thread_id of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this InlineResponse20011.


        :param thread_id: The thread_id of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._thread_id = thread_id

    @property
    def mitigated(self):
        """Gets the mitigated of this InlineResponse20011.  # noqa: E501

        Denotes if this flaw has been fixed by storing the date it was fixed.  # noqa: E501

        :return: The mitigated of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._mitigated

    @mitigated.setter
    def mitigated(self, mitigated):
        """Sets the mitigated of this InlineResponse20011.

        Denotes if this flaw has been fixed by storing the date it was fixed.  # noqa: E501

        :param mitigated: The mitigated of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._mitigated = mitigated

    @property
    def numerical_severity(self):
        """Gets the numerical_severity of this InlineResponse20011.  # noqa: E501

        The numerical representation of the severity (S0, S1, S2, S3, S4).  # noqa: E501

        :return: The numerical_severity of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._numerical_severity

    @numerical_severity.setter
    def numerical_severity(self, numerical_severity):
        """Sets the numerical_severity of this InlineResponse20011.

        The numerical representation of the severity (S0, S1, S2, S3, S4).  # noqa: E501

        :param numerical_severity: The numerical_severity of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and numerical_severity is None:  # noqa: E501
            raise ValueError("Invalid value for `numerical_severity`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                numerical_severity is not None and len(numerical_severity) > 4):
            raise ValueError("Invalid value for `numerical_severity`, length must be less than or equal to `4`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                numerical_severity is not None and len(numerical_severity) < 1):
            raise ValueError("Invalid value for `numerical_severity`, length must be greater than or equal to `1`")  # noqa: E501

        self._numerical_severity = numerical_severity

    @property
    def last_reviewed(self):
        """Gets the last_reviewed of this InlineResponse20011.  # noqa: E501

        Provides the date the flaw was last 'touched' by a tester.  # noqa: E501

        :return: The last_reviewed of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._last_reviewed

    @last_reviewed.setter
    def last_reviewed(self, last_reviewed):
        """Sets the last_reviewed of this InlineResponse20011.

        Provides the date the flaw was last 'touched' by a tester.  # noqa: E501

        :param last_reviewed: The last_reviewed of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._last_reviewed = last_reviewed

    @property
    def param(self):
        """Gets the param of this InlineResponse20011.  # noqa: E501

        Parameter used to trigger the issue (DAST).  # noqa: E501

        :return: The param of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this InlineResponse20011.

        Parameter used to trigger the issue (DAST).  # noqa: E501

        :param param: The param of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                param is not None and len(param) < 1):
            raise ValueError("Invalid value for `param`, length must be greater than or equal to `1`")  # noqa: E501

        self._param = param

    @property
    def payload(self):
        """Gets the payload of this InlineResponse20011.  # noqa: E501

        Payload used to attack the service / application and trigger the bug / problem.  # noqa: E501

        :return: The payload of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this InlineResponse20011.

        Payload used to attack the service / application and trigger the bug / problem.  # noqa: E501

        :param payload: The payload of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                payload is not None and len(payload) < 1):
            raise ValueError("Invalid value for `payload`, length must be greater than or equal to `1`")  # noqa: E501

        self._payload = payload

    @property
    def hash_code(self):
        """Gets the hash_code of this InlineResponse20011.  # noqa: E501

        A hash over a configurable set of fields that is used for findings deduplication.  # noqa: E501

        :return: The hash_code of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._hash_code

    @hash_code.setter
    def hash_code(self, hash_code):
        """Sets the hash_code of this InlineResponse20011.

        A hash over a configurable set of fields that is used for findings deduplication.  # noqa: E501

        :param hash_code: The hash_code of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                hash_code is not None and len(hash_code) < 1):
            raise ValueError("Invalid value for `hash_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._hash_code = hash_code

    @property
    def line(self):
        """Gets the line of this InlineResponse20011.  # noqa: E501

        Source line number of the attack vector.  # noqa: E501

        :return: The line of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this InlineResponse20011.

        Source line number of the attack vector.  # noqa: E501

        :param line: The line of this InlineResponse20011.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                line is not None and line > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `line`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                line is not None and line < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `line`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._line = line

    @property
    def file_path(self):
        """Gets the file_path of this InlineResponse20011.  # noqa: E501

        Identified file(s) containing the flaw.  # noqa: E501

        :return: The file_path of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this InlineResponse20011.

        Identified file(s) containing the flaw.  # noqa: E501

        :param file_path: The file_path of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                file_path is not None and len(file_path) > 4000):
            raise ValueError("Invalid value for `file_path`, length must be less than or equal to `4000`")  # noqa: E501

        self._file_path = file_path

    @property
    def component_name(self):
        """Gets the component_name of this InlineResponse20011.  # noqa: E501

        Name of the affected component (library name, part of a system, ...).  # noqa: E501

        :return: The component_name of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this InlineResponse20011.

        Name of the affected component (library name, part of a system, ...).  # noqa: E501

        :param component_name: The component_name of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                component_name is not None and len(component_name) > 200):
            raise ValueError("Invalid value for `component_name`, length must be less than or equal to `200`")  # noqa: E501

        self._component_name = component_name

    @property
    def component_version(self):
        """Gets the component_version of this InlineResponse20011.  # noqa: E501

        Version of the affected component.  # noqa: E501

        :return: The component_version of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._component_version

    @component_version.setter
    def component_version(self, component_version):
        """Sets the component_version of this InlineResponse20011.

        Version of the affected component.  # noqa: E501

        :param component_version: The component_version of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                component_version is not None and len(component_version) > 100):
            raise ValueError("Invalid value for `component_version`, length must be less than or equal to `100`")  # noqa: E501

        self._component_version = component_version

    @property
    def static_finding(self):
        """Gets the static_finding of this InlineResponse20011.  # noqa: E501

        Flaw has been detected from a Static Application Security Testing tool (SAST).  # noqa: E501

        :return: The static_finding of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._static_finding

    @static_finding.setter
    def static_finding(self, static_finding):
        """Sets the static_finding of this InlineResponse20011.

        Flaw has been detected from a Static Application Security Testing tool (SAST).  # noqa: E501

        :param static_finding: The static_finding of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._static_finding = static_finding

    @property
    def dynamic_finding(self):
        """Gets the dynamic_finding of this InlineResponse20011.  # noqa: E501

        Flaw has been detected from a Dynamic Application Security Testing tool (DAST).  # noqa: E501

        :return: The dynamic_finding of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_finding

    @dynamic_finding.setter
    def dynamic_finding(self, dynamic_finding):
        """Sets the dynamic_finding of this InlineResponse20011.

        Flaw has been detected from a Dynamic Application Security Testing tool (DAST).  # noqa: E501

        :param dynamic_finding: The dynamic_finding of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._dynamic_finding = dynamic_finding

    @property
    def created(self):
        """Gets the created of this InlineResponse20011.  # noqa: E501

        The date the finding was created inside DefectDojo.  # noqa: E501

        :return: The created of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InlineResponse20011.

        The date the finding was created inside DefectDojo.  # noqa: E501

        :param created: The created of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def scanner_confidence(self):
        """Gets the scanner_confidence of this InlineResponse20011.  # noqa: E501

        Confidence level of vulnerability which is supplied by the scanner.  # noqa: E501

        :return: The scanner_confidence of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._scanner_confidence

    @scanner_confidence.setter
    def scanner_confidence(self, scanner_confidence):
        """Sets the scanner_confidence of this InlineResponse20011.

        Confidence level of vulnerability which is supplied by the scanner.  # noqa: E501

        :param scanner_confidence: The scanner_confidence of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._scanner_confidence = scanner_confidence

    @property
    def unique_id_from_tool(self):
        """Gets the unique_id_from_tool of this InlineResponse20011.  # noqa: E501

        Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.  # noqa: E501

        :return: The unique_id_from_tool of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._unique_id_from_tool

    @unique_id_from_tool.setter
    def unique_id_from_tool(self, unique_id_from_tool):
        """Sets the unique_id_from_tool of this InlineResponse20011.

        Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.  # noqa: E501

        :param unique_id_from_tool: The unique_id_from_tool of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                unique_id_from_tool is not None and len(unique_id_from_tool) > 500):
            raise ValueError("Invalid value for `unique_id_from_tool`, length must be less than or equal to `500`")  # noqa: E501

        self._unique_id_from_tool = unique_id_from_tool

    @property
    def vuln_id_from_tool(self):
        """Gets the vuln_id_from_tool of this InlineResponse20011.  # noqa: E501

        Non-unique technical id from the source tool associated with the vulnerability type.  # noqa: E501

        :return: The vuln_id_from_tool of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._vuln_id_from_tool

    @vuln_id_from_tool.setter
    def vuln_id_from_tool(self, vuln_id_from_tool):
        """Sets the vuln_id_from_tool of this InlineResponse20011.

        Non-unique technical id from the source tool associated with the vulnerability type.  # noqa: E501

        :param vuln_id_from_tool: The vuln_id_from_tool of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                vuln_id_from_tool is not None and len(vuln_id_from_tool) > 500):
            raise ValueError("Invalid value for `vuln_id_from_tool`, length must be less than or equal to `500`")  # noqa: E501

        self._vuln_id_from_tool = vuln_id_from_tool

    @property
    def sast_source_object(self):
        """Gets the sast_source_object of this InlineResponse20011.  # noqa: E501

        Source object (variable, function...) of the attack vector.  # noqa: E501

        :return: The sast_source_object of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._sast_source_object

    @sast_source_object.setter
    def sast_source_object(self, sast_source_object):
        """Sets the sast_source_object of this InlineResponse20011.

        Source object (variable, function...) of the attack vector.  # noqa: E501

        :param sast_source_object: The sast_source_object of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                sast_source_object is not None and len(sast_source_object) > 500):
            raise ValueError("Invalid value for `sast_source_object`, length must be less than or equal to `500`")  # noqa: E501

        self._sast_source_object = sast_source_object

    @property
    def sast_sink_object(self):
        """Gets the sast_sink_object of this InlineResponse20011.  # noqa: E501

        Sink object (variable, function...) of the attack vector.  # noqa: E501

        :return: The sast_sink_object of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._sast_sink_object

    @sast_sink_object.setter
    def sast_sink_object(self, sast_sink_object):
        """Sets the sast_sink_object of this InlineResponse20011.

        Sink object (variable, function...) of the attack vector.  # noqa: E501

        :param sast_sink_object: The sast_sink_object of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                sast_sink_object is not None and len(sast_sink_object) > 500):
            raise ValueError("Invalid value for `sast_sink_object`, length must be less than or equal to `500`")  # noqa: E501

        self._sast_sink_object = sast_sink_object

    @property
    def sast_source_line(self):
        """Gets the sast_source_line of this InlineResponse20011.  # noqa: E501

        Source line number of the attack vector.  # noqa: E501

        :return: The sast_source_line of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._sast_source_line

    @sast_source_line.setter
    def sast_source_line(self, sast_source_line):
        """Sets the sast_source_line of this InlineResponse20011.

        Source line number of the attack vector.  # noqa: E501

        :param sast_source_line: The sast_source_line of this InlineResponse20011.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                sast_source_line is not None and sast_source_line > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `sast_source_line`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sast_source_line is not None and sast_source_line < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `sast_source_line`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._sast_source_line = sast_source_line

    @property
    def sast_source_file_path(self):
        """Gets the sast_source_file_path of this InlineResponse20011.  # noqa: E501

        Source file path of the attack vector.  # noqa: E501

        :return: The sast_source_file_path of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._sast_source_file_path

    @sast_source_file_path.setter
    def sast_source_file_path(self, sast_source_file_path):
        """Sets the sast_source_file_path of this InlineResponse20011.

        Source file path of the attack vector.  # noqa: E501

        :param sast_source_file_path: The sast_source_file_path of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                sast_source_file_path is not None and len(sast_source_file_path) > 4000):
            raise ValueError("Invalid value for `sast_source_file_path`, length must be less than or equal to `4000`")  # noqa: E501

        self._sast_source_file_path = sast_source_file_path

    @property
    def nb_occurences(self):
        """Gets the nb_occurences of this InlineResponse20011.  # noqa: E501

        Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.  # noqa: E501

        :return: The nb_occurences of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._nb_occurences

    @nb_occurences.setter
    def nb_occurences(self, nb_occurences):
        """Sets the nb_occurences of this InlineResponse20011.

        Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.  # noqa: E501

        :param nb_occurences: The nb_occurences of this InlineResponse20011.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                nb_occurences is not None and nb_occurences > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `nb_occurences`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                nb_occurences is not None and nb_occurences < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `nb_occurences`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._nb_occurences = nb_occurences

    @property
    def publish_date(self):
        """Gets the publish_date of this InlineResponse20011.  # noqa: E501

        Date when this vulnerability was made publicly available.  # noqa: E501

        :return: The publish_date of this InlineResponse20011.  # noqa: E501
        :rtype: date
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date):
        """Sets the publish_date of this InlineResponse20011.

        Date when this vulnerability was made publicly available.  # noqa: E501

        :param publish_date: The publish_date of this InlineResponse20011.  # noqa: E501
        :type: date
        """

        self._publish_date = publish_date

    @property
    def service(self):
        """Gets the service of this InlineResponse20011.  # noqa: E501

        A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.  # noqa: E501

        :return: The service of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this InlineResponse20011.

        A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.  # noqa: E501

        :param service: The service of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                service is not None and len(service) > 200):
            raise ValueError("Invalid value for `service`, length must be less than or equal to `200`")  # noqa: E501

        self._service = service

    @property
    def test(self):
        """Gets the test of this InlineResponse20011.  # noqa: E501

        The test that is associated with this flaw.  # noqa: E501

        :return: The test of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this InlineResponse20011.

        The test that is associated with this flaw.  # noqa: E501

        :param test: The test of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._test = test

    @property
    def duplicate_finding(self):
        """Gets the duplicate_finding of this InlineResponse20011.  # noqa: E501

        Link to the original finding if this finding is a duplicate.  # noqa: E501

        :return: The duplicate_finding of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._duplicate_finding

    @duplicate_finding.setter
    def duplicate_finding(self, duplicate_finding):
        """Sets the duplicate_finding of this InlineResponse20011.

        Link to the original finding if this finding is a duplicate.  # noqa: E501

        :param duplicate_finding: The duplicate_finding of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._duplicate_finding = duplicate_finding

    @property
    def review_requested_by(self):
        """Gets the review_requested_by of this InlineResponse20011.  # noqa: E501

        Documents who requested a review for this finding.  # noqa: E501

        :return: The review_requested_by of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._review_requested_by

    @review_requested_by.setter
    def review_requested_by(self, review_requested_by):
        """Sets the review_requested_by of this InlineResponse20011.

        Documents who requested a review for this finding.  # noqa: E501

        :param review_requested_by: The review_requested_by of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._review_requested_by = review_requested_by

    @property
    def defect_review_requested_by(self):
        """Gets the defect_review_requested_by of this InlineResponse20011.  # noqa: E501

        Documents who requested a defect review for this flaw.  # noqa: E501

        :return: The defect_review_requested_by of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._defect_review_requested_by

    @defect_review_requested_by.setter
    def defect_review_requested_by(self, defect_review_requested_by):
        """Sets the defect_review_requested_by of this InlineResponse20011.

        Documents who requested a defect review for this flaw.  # noqa: E501

        :param defect_review_requested_by: The defect_review_requested_by of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._defect_review_requested_by = defect_review_requested_by

    @property
    def mitigated_by(self):
        """Gets the mitigated_by of this InlineResponse20011.  # noqa: E501

        Documents who has marked this flaw as fixed.  # noqa: E501

        :return: The mitigated_by of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._mitigated_by

    @mitigated_by.setter
    def mitigated_by(self, mitigated_by):
        """Sets the mitigated_by of this InlineResponse20011.

        Documents who has marked this flaw as fixed.  # noqa: E501

        :param mitigated_by: The mitigated_by of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._mitigated_by = mitigated_by

    @property
    def reporter(self):
        """Gets the reporter of this InlineResponse20011.  # noqa: E501

        Documents who reported the flaw.  # noqa: E501

        :return: The reporter of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this InlineResponse20011.

        Documents who reported the flaw.  # noqa: E501

        :param reporter: The reporter of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._reporter = reporter

    @property
    def last_reviewed_by(self):
        """Gets the last_reviewed_by of this InlineResponse20011.  # noqa: E501

        Provides the person who last reviewed the flaw.  # noqa: E501

        :return: The last_reviewed_by of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._last_reviewed_by

    @last_reviewed_by.setter
    def last_reviewed_by(self, last_reviewed_by):
        """Sets the last_reviewed_by of this InlineResponse20011.

        Provides the person who last reviewed the flaw.  # noqa: E501

        :param last_reviewed_by: The last_reviewed_by of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._last_reviewed_by = last_reviewed_by

    @property
    def sonarqube_issue(self):
        """Gets the sonarqube_issue of this InlineResponse20011.  # noqa: E501

        The SonarQube issue associated with this finding.  # noqa: E501

        :return: The sonarqube_issue of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._sonarqube_issue

    @sonarqube_issue.setter
    def sonarqube_issue(self, sonarqube_issue):
        """Sets the sonarqube_issue of this InlineResponse20011.

        The SonarQube issue associated with this finding.  # noqa: E501

        :param sonarqube_issue: The sonarqube_issue of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._sonarqube_issue = sonarqube_issue

    @property
    def endpoints(self):
        """Gets the endpoints of this InlineResponse20011.  # noqa: E501

        The hosts within the product that are susceptible to this flaw.  # noqa: E501

        :return: The endpoints of this InlineResponse20011.  # noqa: E501
        :rtype: list[int]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this InlineResponse20011.

        The hosts within the product that are susceptible to this flaw.  # noqa: E501

        :param endpoints: The endpoints of this InlineResponse20011.  # noqa: E501
        :type: list[int]
        """

        self._endpoints = endpoints

    @property
    def endpoint_status(self):
        """Gets the endpoint_status of this InlineResponse20011.  # noqa: E501

        The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...).  # noqa: E501

        :return: The endpoint_status of this InlineResponse20011.  # noqa: E501
        :rtype: list[int]
        """
        return self._endpoint_status

    @endpoint_status.setter
    def endpoint_status(self, endpoint_status):
        """Sets the endpoint_status of this InlineResponse20011.

        The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...).  # noqa: E501

        :param endpoint_status: The endpoint_status of this InlineResponse20011.  # noqa: E501
        :type: list[int]
        """

        self._endpoint_status = endpoint_status

    @property
    def reviewers(self):
        """Gets the reviewers of this InlineResponse20011.  # noqa: E501

        Documents who reviewed the flaw.  # noqa: E501

        :return: The reviewers of this InlineResponse20011.  # noqa: E501
        :rtype: list[int]
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers):
        """Sets the reviewers of this InlineResponse20011.

        Documents who reviewed the flaw.  # noqa: E501

        :param reviewers: The reviewers of this InlineResponse20011.  # noqa: E501
        :type: list[int]
        """

        self._reviewers = reviewers

    @property
    def notes(self):
        """Gets the notes of this InlineResponse20011.  # noqa: E501


        :return: The notes of this InlineResponse20011.  # noqa: E501
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this InlineResponse20011.


        :param notes: The notes of this InlineResponse20011.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def files(self):
        """Gets the files of this InlineResponse20011.  # noqa: E501

        Files(s) related to the flaw.  # noqa: E501

        :return: The files of this InlineResponse20011.  # noqa: E501
        :rtype: list[int]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this InlineResponse20011.

        Files(s) related to the flaw.  # noqa: E501

        :param files: The files of this InlineResponse20011.  # noqa: E501
        :type: list[int]
        """

        self._files = files

    @property
    def found_by(self):
        """Gets the found_by of this InlineResponse20011.  # noqa: E501

        The name of the scanner that identified the flaw.  # noqa: E501

        :return: The found_by of this InlineResponse20011.  # noqa: E501
        :rtype: list[int]
        """
        return self._found_by

    @found_by.setter
    def found_by(self, found_by):
        """Sets the found_by of this InlineResponse20011.

        The name of the scanner that identified the flaw.  # noqa: E501

        :param found_by: The found_by of this InlineResponse20011.  # noqa: E501
        :type: list[int]
        """

        self._found_by = found_by

    @property
    def prefetch(self):
        """Gets the prefetch of this InlineResponse20011.  # noqa: E501


        :return: The prefetch of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse20010Prefetch
        """
        return self._prefetch

    @prefetch.setter
    def prefetch(self, prefetch):
        """Sets the prefetch of this InlineResponse20011.


        :param prefetch: The prefetch of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse20010Prefetch
        """

        self._prefetch = prefetch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20011):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20011):
            return True

        return self.to_dict() != other.to_dict()
