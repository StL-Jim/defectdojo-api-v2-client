# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse20026(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'product': 'int',
        'user': 'int',
        'product_type_added': 'list[str]',
        'product_added': 'list[str]',
        'engagement_added': 'list[str]',
        'test_added': 'list[str]',
        'scan_added': 'list[str]',
        'jira_update': 'list[str]',
        'upcoming_engagement': 'list[str]',
        'stale_engagement': 'list[str]',
        'auto_close_engagement': 'list[str]',
        'close_engagement': 'list[str]',
        'user_mentioned': 'list[str]',
        'code_review': 'list[str]',
        'review_requested': 'list[str]',
        'other': 'list[str]',
        'sla_breach': 'list[str]',
        'risk_acceptance_expiration': 'list[str]',
        'template': 'bool',
        'prefetch': 'InlineResponse20025Prefetch'
    }

    attribute_map = {
        'id': 'id',
        'product': 'product',
        'user': 'user',
        'product_type_added': 'product_type_added',
        'product_added': 'product_added',
        'engagement_added': 'engagement_added',
        'test_added': 'test_added',
        'scan_added': 'scan_added',
        'jira_update': 'jira_update',
        'upcoming_engagement': 'upcoming_engagement',
        'stale_engagement': 'stale_engagement',
        'auto_close_engagement': 'auto_close_engagement',
        'close_engagement': 'close_engagement',
        'user_mentioned': 'user_mentioned',
        'code_review': 'code_review',
        'review_requested': 'review_requested',
        'other': 'other',
        'sla_breach': 'sla_breach',
        'risk_acceptance_expiration': 'risk_acceptance_expiration',
        'template': 'template',
        'prefetch': 'prefetch'
    }

    def __init__(self, id=None, product=None, user=None, product_type_added=None, product_added=None, engagement_added=None, test_added=None, scan_added=None, jira_update=None, upcoming_engagement=None, stale_engagement=None, auto_close_engagement=None, close_engagement=None, user_mentioned=None, code_review=None, review_requested=None, other=None, sla_breach=None, risk_acceptance_expiration=None, template=False, prefetch=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20026 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._product = None
        self._user = None
        self._product_type_added = None
        self._product_added = None
        self._engagement_added = None
        self._test_added = None
        self._scan_added = None
        self._jira_update = None
        self._upcoming_engagement = None
        self._stale_engagement = None
        self._auto_close_engagement = None
        self._close_engagement = None
        self._user_mentioned = None
        self._code_review = None
        self._review_requested = None
        self._other = None
        self._sla_breach = None
        self._risk_acceptance_expiration = None
        self._template = None
        self._prefetch = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.product = product
        self.user = user
        if product_type_added is not None:
            self.product_type_added = product_type_added
        if product_added is not None:
            self.product_added = product_added
        if engagement_added is not None:
            self.engagement_added = engagement_added
        if test_added is not None:
            self.test_added = test_added
        if scan_added is not None:
            self.scan_added = scan_added
        if jira_update is not None:
            self.jira_update = jira_update
        if upcoming_engagement is not None:
            self.upcoming_engagement = upcoming_engagement
        if stale_engagement is not None:
            self.stale_engagement = stale_engagement
        if auto_close_engagement is not None:
            self.auto_close_engagement = auto_close_engagement
        if close_engagement is not None:
            self.close_engagement = close_engagement
        if user_mentioned is not None:
            self.user_mentioned = user_mentioned
        if code_review is not None:
            self.code_review = code_review
        if review_requested is not None:
            self.review_requested = review_requested
        if other is not None:
            self.other = other
        if sla_breach is not None:
            self.sla_breach = sla_breach
        if risk_acceptance_expiration is not None:
            self.risk_acceptance_expiration = risk_acceptance_expiration
        if template is not None:
            self.template = template
        if prefetch is not None:
            self.prefetch = prefetch

    @property
    def id(self):
        """Gets the id of this InlineResponse20026.  # noqa: E501


        :return: The id of this InlineResponse20026.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20026.


        :param id: The id of this InlineResponse20026.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def product(self):
        """Gets the product of this InlineResponse20026.  # noqa: E501


        :return: The product of this InlineResponse20026.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this InlineResponse20026.


        :param product: The product of this InlineResponse20026.  # noqa: E501
        :type: int
        """

        self._product = product

    @property
    def user(self):
        """Gets the user of this InlineResponse20026.  # noqa: E501


        :return: The user of this InlineResponse20026.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this InlineResponse20026.


        :param user: The user of this InlineResponse20026.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def product_type_added(self):
        """Gets the product_type_added of this InlineResponse20026.  # noqa: E501


        :return: The product_type_added of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._product_type_added

    @product_type_added.setter
    def product_type_added(self, product_type_added):
        """Sets the product_type_added of this InlineResponse20026.


        :param product_type_added: The product_type_added of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(product_type_added).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `product_type_added` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(product_type_added) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._product_type_added = product_type_added

    @property
    def product_added(self):
        """Gets the product_added of this InlineResponse20026.  # noqa: E501


        :return: The product_added of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._product_added

    @product_added.setter
    def product_added(self, product_added):
        """Sets the product_added of this InlineResponse20026.


        :param product_added: The product_added of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(product_added).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `product_added` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(product_added) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._product_added = product_added

    @property
    def engagement_added(self):
        """Gets the engagement_added of this InlineResponse20026.  # noqa: E501


        :return: The engagement_added of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._engagement_added

    @engagement_added.setter
    def engagement_added(self, engagement_added):
        """Sets the engagement_added of this InlineResponse20026.


        :param engagement_added: The engagement_added of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(engagement_added).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `engagement_added` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(engagement_added) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._engagement_added = engagement_added

    @property
    def test_added(self):
        """Gets the test_added of this InlineResponse20026.  # noqa: E501


        :return: The test_added of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._test_added

    @test_added.setter
    def test_added(self, test_added):
        """Sets the test_added of this InlineResponse20026.


        :param test_added: The test_added of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(test_added).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `test_added` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(test_added) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._test_added = test_added

    @property
    def scan_added(self):
        """Gets the scan_added of this InlineResponse20026.  # noqa: E501


        :return: The scan_added of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._scan_added

    @scan_added.setter
    def scan_added(self, scan_added):
        """Sets the scan_added of this InlineResponse20026.


        :param scan_added: The scan_added of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(scan_added).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `scan_added` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(scan_added) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._scan_added = scan_added

    @property
    def jira_update(self):
        """Gets the jira_update of this InlineResponse20026.  # noqa: E501


        :return: The jira_update of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._jira_update

    @jira_update.setter
    def jira_update(self, jira_update):
        """Sets the jira_update of this InlineResponse20026.


        :param jira_update: The jira_update of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(jira_update).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `jira_update` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(jira_update) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._jira_update = jira_update

    @property
    def upcoming_engagement(self):
        """Gets the upcoming_engagement of this InlineResponse20026.  # noqa: E501


        :return: The upcoming_engagement of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._upcoming_engagement

    @upcoming_engagement.setter
    def upcoming_engagement(self, upcoming_engagement):
        """Sets the upcoming_engagement of this InlineResponse20026.


        :param upcoming_engagement: The upcoming_engagement of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(upcoming_engagement).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `upcoming_engagement` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(upcoming_engagement) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._upcoming_engagement = upcoming_engagement

    @property
    def stale_engagement(self):
        """Gets the stale_engagement of this InlineResponse20026.  # noqa: E501


        :return: The stale_engagement of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._stale_engagement

    @stale_engagement.setter
    def stale_engagement(self, stale_engagement):
        """Sets the stale_engagement of this InlineResponse20026.


        :param stale_engagement: The stale_engagement of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(stale_engagement).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `stale_engagement` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(stale_engagement) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._stale_engagement = stale_engagement

    @property
    def auto_close_engagement(self):
        """Gets the auto_close_engagement of this InlineResponse20026.  # noqa: E501


        :return: The auto_close_engagement of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._auto_close_engagement

    @auto_close_engagement.setter
    def auto_close_engagement(self, auto_close_engagement):
        """Sets the auto_close_engagement of this InlineResponse20026.


        :param auto_close_engagement: The auto_close_engagement of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(auto_close_engagement).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `auto_close_engagement` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(auto_close_engagement) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._auto_close_engagement = auto_close_engagement

    @property
    def close_engagement(self):
        """Gets the close_engagement of this InlineResponse20026.  # noqa: E501


        :return: The close_engagement of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._close_engagement

    @close_engagement.setter
    def close_engagement(self, close_engagement):
        """Sets the close_engagement of this InlineResponse20026.


        :param close_engagement: The close_engagement of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(close_engagement).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `close_engagement` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(close_engagement) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._close_engagement = close_engagement

    @property
    def user_mentioned(self):
        """Gets the user_mentioned of this InlineResponse20026.  # noqa: E501


        :return: The user_mentioned of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_mentioned

    @user_mentioned.setter
    def user_mentioned(self, user_mentioned):
        """Sets the user_mentioned of this InlineResponse20026.


        :param user_mentioned: The user_mentioned of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(user_mentioned).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `user_mentioned` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(user_mentioned) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._user_mentioned = user_mentioned

    @property
    def code_review(self):
        """Gets the code_review of this InlineResponse20026.  # noqa: E501


        :return: The code_review of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._code_review

    @code_review.setter
    def code_review(self, code_review):
        """Sets the code_review of this InlineResponse20026.


        :param code_review: The code_review of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(code_review).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `code_review` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(code_review) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._code_review = code_review

    @property
    def review_requested(self):
        """Gets the review_requested of this InlineResponse20026.  # noqa: E501


        :return: The review_requested of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._review_requested

    @review_requested.setter
    def review_requested(self, review_requested):
        """Sets the review_requested of this InlineResponse20026.


        :param review_requested: The review_requested of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(review_requested).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `review_requested` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(review_requested) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._review_requested = review_requested

    @property
    def other(self):
        """Gets the other of this InlineResponse20026.  # noqa: E501


        :return: The other of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this InlineResponse20026.


        :param other: The other of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(other).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `other` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(other) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._other = other

    @property
    def sla_breach(self):
        """Gets the sla_breach of this InlineResponse20026.  # noqa: E501


        :return: The sla_breach of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._sla_breach

    @sla_breach.setter
    def sla_breach(self, sla_breach):
        """Sets the sla_breach of this InlineResponse20026.


        :param sla_breach: The sla_breach of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(sla_breach).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `sla_breach` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(sla_breach) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._sla_breach = sla_breach

    @property
    def risk_acceptance_expiration(self):
        """Gets the risk_acceptance_expiration of this InlineResponse20026.  # noqa: E501


        :return: The risk_acceptance_expiration of this InlineResponse20026.  # noqa: E501
        :rtype: list[str]
        """
        return self._risk_acceptance_expiration

    @risk_acceptance_expiration.setter
    def risk_acceptance_expiration(self, risk_acceptance_expiration):
        """Sets the risk_acceptance_expiration of this InlineResponse20026.


        :param risk_acceptance_expiration: The risk_acceptance_expiration of this InlineResponse20026.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["slack", "msteams", "mail", "alert"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(risk_acceptance_expiration).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `risk_acceptance_expiration` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(risk_acceptance_expiration) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._risk_acceptance_expiration = risk_acceptance_expiration

    @property
    def template(self):
        """Gets the template of this InlineResponse20026.  # noqa: E501


        :return: The template of this InlineResponse20026.  # noqa: E501
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this InlineResponse20026.


        :param template: The template of this InlineResponse20026.  # noqa: E501
        :type: bool
        """

        self._template = template

    @property
    def prefetch(self):
        """Gets the prefetch of this InlineResponse20026.  # noqa: E501


        :return: The prefetch of this InlineResponse20026.  # noqa: E501
        :rtype: InlineResponse20025Prefetch
        """
        return self._prefetch

    @prefetch.setter
    def prefetch(self, prefetch):
        """Sets the prefetch of this InlineResponse20026.


        :param prefetch: The prefetch of this InlineResponse20026.  # noqa: E501
        :type: InlineResponse20025Prefetch
        """

        self._prefetch = prefetch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20026):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20026):
            return True

        return self.to_dict() != other.to_dict()
