# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SeverityStatusStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'info': 'StatusStatistics',
        'low': 'StatusStatistics',
        'medium': 'StatusStatistics',
        'high': 'StatusStatistics',
        'critical': 'StatusStatistics',
        'total': 'StatusStatistics'
    }

    attribute_map = {
        'info': 'info',
        'low': 'low',
        'medium': 'medium',
        'high': 'high',
        'critical': 'critical',
        'total': 'total'
    }

    def __init__(self, info=None, low=None, medium=None, high=None, critical=None, total=None, local_vars_configuration=None):  # noqa: E501
        """SeverityStatusStatistics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._info = None
        self._low = None
        self._medium = None
        self._high = None
        self._critical = None
        self._total = None
        self.discriminator = None

        self.info = info
        self.low = low
        self.medium = medium
        self.high = high
        self.critical = critical
        self.total = total

    @property
    def info(self):
        """Gets the info of this SeverityStatusStatistics.  # noqa: E501


        :return: The info of this SeverityStatusStatistics.  # noqa: E501
        :rtype: StatusStatistics
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this SeverityStatusStatistics.


        :param info: The info of this SeverityStatusStatistics.  # noqa: E501
        :type: StatusStatistics
        """
        if self.local_vars_configuration.client_side_validation and info is None:  # noqa: E501
            raise ValueError("Invalid value for `info`, must not be `None`")  # noqa: E501

        self._info = info

    @property
    def low(self):
        """Gets the low of this SeverityStatusStatistics.  # noqa: E501


        :return: The low of this SeverityStatusStatistics.  # noqa: E501
        :rtype: StatusStatistics
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this SeverityStatusStatistics.


        :param low: The low of this SeverityStatusStatistics.  # noqa: E501
        :type: StatusStatistics
        """
        if self.local_vars_configuration.client_side_validation and low is None:  # noqa: E501
            raise ValueError("Invalid value for `low`, must not be `None`")  # noqa: E501

        self._low = low

    @property
    def medium(self):
        """Gets the medium of this SeverityStatusStatistics.  # noqa: E501


        :return: The medium of this SeverityStatusStatistics.  # noqa: E501
        :rtype: StatusStatistics
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this SeverityStatusStatistics.


        :param medium: The medium of this SeverityStatusStatistics.  # noqa: E501
        :type: StatusStatistics
        """
        if self.local_vars_configuration.client_side_validation and medium is None:  # noqa: E501
            raise ValueError("Invalid value for `medium`, must not be `None`")  # noqa: E501

        self._medium = medium

    @property
    def high(self):
        """Gets the high of this SeverityStatusStatistics.  # noqa: E501


        :return: The high of this SeverityStatusStatistics.  # noqa: E501
        :rtype: StatusStatistics
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this SeverityStatusStatistics.


        :param high: The high of this SeverityStatusStatistics.  # noqa: E501
        :type: StatusStatistics
        """
        if self.local_vars_configuration.client_side_validation and high is None:  # noqa: E501
            raise ValueError("Invalid value for `high`, must not be `None`")  # noqa: E501

        self._high = high

    @property
    def critical(self):
        """Gets the critical of this SeverityStatusStatistics.  # noqa: E501


        :return: The critical of this SeverityStatusStatistics.  # noqa: E501
        :rtype: StatusStatistics
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this SeverityStatusStatistics.


        :param critical: The critical of this SeverityStatusStatistics.  # noqa: E501
        :type: StatusStatistics
        """
        if self.local_vars_configuration.client_side_validation and critical is None:  # noqa: E501
            raise ValueError("Invalid value for `critical`, must not be `None`")  # noqa: E501

        self._critical = critical

    @property
    def total(self):
        """Gets the total of this SeverityStatusStatistics.  # noqa: E501


        :return: The total of this SeverityStatusStatistics.  # noqa: E501
        :rtype: StatusStatistics
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SeverityStatusStatistics.


        :param total: The total of this SeverityStatusStatistics.  # noqa: E501
        :type: StatusStatistics
        """
        if self.local_vars_configuration.client_side_validation and total is None:  # noqa: E501
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeverityStatusStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SeverityStatusStatistics):
            return True

        return self.to_dict() != other.to_dict()
