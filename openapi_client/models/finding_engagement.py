# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class FindingEngagement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'product': 'FindingProduct',
        'branch_tag': 'str',
        'build_id': 'str',
        'commit_hash': 'str',
        'version': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'product': 'product',
        'branch_tag': 'branch_tag',
        'build_id': 'build_id',
        'commit_hash': 'commit_hash',
        'version': 'version'
    }

    def __init__(self, id=None, name=None, product=None, branch_tag=None, build_id=None, commit_hash=None, version=None, local_vars_configuration=None):  # noqa: E501
        """FindingEngagement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._product = None
        self._branch_tag = None
        self._build_id = None
        self._commit_hash = None
        self._version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if product is not None:
            self.product = product
        self.branch_tag = branch_tag
        self.build_id = build_id
        self.commit_hash = commit_hash
        self.version = version

    @property
    def id(self):
        """Gets the id of this FindingEngagement.  # noqa: E501


        :return: The id of this FindingEngagement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FindingEngagement.


        :param id: The id of this FindingEngagement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FindingEngagement.  # noqa: E501


        :return: The name of this FindingEngagement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FindingEngagement.


        :param name: The name of this FindingEngagement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 300):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `300`")  # noqa: E501

        self._name = name

    @property
    def product(self):
        """Gets the product of this FindingEngagement.  # noqa: E501


        :return: The product of this FindingEngagement.  # noqa: E501
        :rtype: FindingProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this FindingEngagement.


        :param product: The product of this FindingEngagement.  # noqa: E501
        :type: FindingProduct
        """

        self._product = product

    @property
    def branch_tag(self):
        """Gets the branch_tag of this FindingEngagement.  # noqa: E501

        Tag or branch of the product the engagement tested.  # noqa: E501

        :return: The branch_tag of this FindingEngagement.  # noqa: E501
        :rtype: str
        """
        return self._branch_tag

    @branch_tag.setter
    def branch_tag(self, branch_tag):
        """Sets the branch_tag of this FindingEngagement.

        Tag or branch of the product the engagement tested.  # noqa: E501

        :param branch_tag: The branch_tag of this FindingEngagement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                branch_tag is not None and len(branch_tag) > 150):
            raise ValueError("Invalid value for `branch_tag`, length must be less than or equal to `150`")  # noqa: E501

        self._branch_tag = branch_tag

    @property
    def build_id(self):
        """Gets the build_id of this FindingEngagement.  # noqa: E501

        Build ID of the product the engagement tested.  # noqa: E501

        :return: The build_id of this FindingEngagement.  # noqa: E501
        :rtype: str
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this FindingEngagement.

        Build ID of the product the engagement tested.  # noqa: E501

        :param build_id: The build_id of this FindingEngagement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                build_id is not None and len(build_id) > 150):
            raise ValueError("Invalid value for `build_id`, length must be less than or equal to `150`")  # noqa: E501

        self._build_id = build_id

    @property
    def commit_hash(self):
        """Gets the commit_hash of this FindingEngagement.  # noqa: E501

        Commit hash from repo  # noqa: E501

        :return: The commit_hash of this FindingEngagement.  # noqa: E501
        :rtype: str
        """
        return self._commit_hash

    @commit_hash.setter
    def commit_hash(self, commit_hash):
        """Sets the commit_hash of this FindingEngagement.

        Commit hash from repo  # noqa: E501

        :param commit_hash: The commit_hash of this FindingEngagement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                commit_hash is not None and len(commit_hash) > 150):
            raise ValueError("Invalid value for `commit_hash`, length must be less than or equal to `150`")  # noqa: E501

        self._commit_hash = commit_hash

    @property
    def version(self):
        """Gets the version of this FindingEngagement.  # noqa: E501

        Version of the product the engagement tested.  # noqa: E501

        :return: The version of this FindingEngagement.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FindingEngagement.

        Version of the product the engagement tested.  # noqa: E501

        :param version: The version of this FindingEngagement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) > 100):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `100`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindingEngagement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FindingEngagement):
            return True

        return self.to_dict() != other.to_dict()
