# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EndpointStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'date': 'datetime',
        'last_modified': 'datetime',
        'mitigated': 'bool',
        'mitigated_time': 'datetime',
        'false_positive': 'bool',
        'out_of_scope': 'bool',
        'risk_accepted': 'bool',
        'mitigated_by': 'int',
        'endpoint': 'int',
        'finding': 'int'
    }

    attribute_map = {
        'id': 'id',
        'date': 'date',
        'last_modified': 'last_modified',
        'mitigated': 'mitigated',
        'mitigated_time': 'mitigated_time',
        'false_positive': 'false_positive',
        'out_of_scope': 'out_of_scope',
        'risk_accepted': 'risk_accepted',
        'mitigated_by': 'mitigated_by',
        'endpoint': 'endpoint',
        'finding': 'finding'
    }

    def __init__(self, id=None, date=None, last_modified=None, mitigated=None, mitigated_time=None, false_positive=None, out_of_scope=None, risk_accepted=None, mitigated_by=None, endpoint=None, finding=None, local_vars_configuration=None):  # noqa: E501
        """EndpointStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._date = None
        self._last_modified = None
        self._mitigated = None
        self._mitigated_time = None
        self._false_positive = None
        self._out_of_scope = None
        self._risk_accepted = None
        self._mitigated_by = None
        self._endpoint = None
        self._finding = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if date is not None:
            self.date = date
        if last_modified is not None:
            self.last_modified = last_modified
        if mitigated is not None:
            self.mitigated = mitigated
        if mitigated_time is not None:
            self.mitigated_time = mitigated_time
        if false_positive is not None:
            self.false_positive = false_positive
        if out_of_scope is not None:
            self.out_of_scope = out_of_scope
        if risk_accepted is not None:
            self.risk_accepted = risk_accepted
        self.mitigated_by = mitigated_by
        self.endpoint = endpoint
        self.finding = finding

    @property
    def id(self):
        """Gets the id of this EndpointStatus.  # noqa: E501


        :return: The id of this EndpointStatus.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EndpointStatus.


        :param id: The id of this EndpointStatus.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def date(self):
        """Gets the date of this EndpointStatus.  # noqa: E501


        :return: The date of this EndpointStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this EndpointStatus.


        :param date: The date of this EndpointStatus.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def last_modified(self):
        """Gets the last_modified of this EndpointStatus.  # noqa: E501


        :return: The last_modified of this EndpointStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this EndpointStatus.


        :param last_modified: The last_modified of this EndpointStatus.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def mitigated(self):
        """Gets the mitigated of this EndpointStatus.  # noqa: E501


        :return: The mitigated of this EndpointStatus.  # noqa: E501
        :rtype: bool
        """
        return self._mitigated

    @mitigated.setter
    def mitigated(self, mitigated):
        """Sets the mitigated of this EndpointStatus.


        :param mitigated: The mitigated of this EndpointStatus.  # noqa: E501
        :type: bool
        """

        self._mitigated = mitigated

    @property
    def mitigated_time(self):
        """Gets the mitigated_time of this EndpointStatus.  # noqa: E501


        :return: The mitigated_time of this EndpointStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._mitigated_time

    @mitigated_time.setter
    def mitigated_time(self, mitigated_time):
        """Sets the mitigated_time of this EndpointStatus.


        :param mitigated_time: The mitigated_time of this EndpointStatus.  # noqa: E501
        :type: datetime
        """

        self._mitigated_time = mitigated_time

    @property
    def false_positive(self):
        """Gets the false_positive of this EndpointStatus.  # noqa: E501


        :return: The false_positive of this EndpointStatus.  # noqa: E501
        :rtype: bool
        """
        return self._false_positive

    @false_positive.setter
    def false_positive(self, false_positive):
        """Sets the false_positive of this EndpointStatus.


        :param false_positive: The false_positive of this EndpointStatus.  # noqa: E501
        :type: bool
        """

        self._false_positive = false_positive

    @property
    def out_of_scope(self):
        """Gets the out_of_scope of this EndpointStatus.  # noqa: E501


        :return: The out_of_scope of this EndpointStatus.  # noqa: E501
        :rtype: bool
        """
        return self._out_of_scope

    @out_of_scope.setter
    def out_of_scope(self, out_of_scope):
        """Sets the out_of_scope of this EndpointStatus.


        :param out_of_scope: The out_of_scope of this EndpointStatus.  # noqa: E501
        :type: bool
        """

        self._out_of_scope = out_of_scope

    @property
    def risk_accepted(self):
        """Gets the risk_accepted of this EndpointStatus.  # noqa: E501


        :return: The risk_accepted of this EndpointStatus.  # noqa: E501
        :rtype: bool
        """
        return self._risk_accepted

    @risk_accepted.setter
    def risk_accepted(self, risk_accepted):
        """Sets the risk_accepted of this EndpointStatus.


        :param risk_accepted: The risk_accepted of this EndpointStatus.  # noqa: E501
        :type: bool
        """

        self._risk_accepted = risk_accepted

    @property
    def mitigated_by(self):
        """Gets the mitigated_by of this EndpointStatus.  # noqa: E501


        :return: The mitigated_by of this EndpointStatus.  # noqa: E501
        :rtype: int
        """
        return self._mitigated_by

    @mitigated_by.setter
    def mitigated_by(self, mitigated_by):
        """Sets the mitigated_by of this EndpointStatus.


        :param mitigated_by: The mitigated_by of this EndpointStatus.  # noqa: E501
        :type: int
        """

        self._mitigated_by = mitigated_by

    @property
    def endpoint(self):
        """Gets the endpoint of this EndpointStatus.  # noqa: E501


        :return: The endpoint of this EndpointStatus.  # noqa: E501
        :rtype: int
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this EndpointStatus.


        :param endpoint: The endpoint of this EndpointStatus.  # noqa: E501
        :type: int
        """

        self._endpoint = endpoint

    @property
    def finding(self):
        """Gets the finding of this EndpointStatus.  # noqa: E501


        :return: The finding of this EndpointStatus.  # noqa: E501
        :rtype: int
        """
        return self._finding

    @finding.setter
    def finding(self, finding):
        """Sets the finding of this EndpointStatus.


        :param finding: The finding of this EndpointStatus.  # noqa: E501
        :type: int
        """

        self._finding = finding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EndpointStatus):
            return True

        return self.to_dict() != other.to_dict()
