# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProductAPIScanConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'service_key_1': 'str',
        'service_key_2': 'str',
        'service_key_3': 'str',
        'product': 'int',
        'tool_configuration': 'int'
    }

    attribute_map = {
        'id': 'id',
        'service_key_1': 'service_key_1',
        'service_key_2': 'service_key_2',
        'service_key_3': 'service_key_3',
        'product': 'product',
        'tool_configuration': 'tool_configuration'
    }

    def __init__(self, id=None, service_key_1=None, service_key_2=None, service_key_3=None, product=None, tool_configuration=None, local_vars_configuration=None):  # noqa: E501
        """ProductAPIScanConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._service_key_1 = None
        self._service_key_2 = None
        self._service_key_3 = None
        self._product = None
        self._tool_configuration = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.service_key_1 = service_key_1
        self.service_key_2 = service_key_2
        self.service_key_3 = service_key_3
        self.product = product
        self.tool_configuration = tool_configuration

    @property
    def id(self):
        """Gets the id of this ProductAPIScanConfiguration.  # noqa: E501


        :return: The id of this ProductAPIScanConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductAPIScanConfiguration.


        :param id: The id of this ProductAPIScanConfiguration.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def service_key_1(self):
        """Gets the service_key_1 of this ProductAPIScanConfiguration.  # noqa: E501


        :return: The service_key_1 of this ProductAPIScanConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._service_key_1

    @service_key_1.setter
    def service_key_1(self, service_key_1):
        """Sets the service_key_1 of this ProductAPIScanConfiguration.


        :param service_key_1: The service_key_1 of this ProductAPIScanConfiguration.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                service_key_1 is not None and len(service_key_1) > 200):
            raise ValueError("Invalid value for `service_key_1`, length must be less than or equal to `200`")  # noqa: E501

        self._service_key_1 = service_key_1

    @property
    def service_key_2(self):
        """Gets the service_key_2 of this ProductAPIScanConfiguration.  # noqa: E501


        :return: The service_key_2 of this ProductAPIScanConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._service_key_2

    @service_key_2.setter
    def service_key_2(self, service_key_2):
        """Sets the service_key_2 of this ProductAPIScanConfiguration.


        :param service_key_2: The service_key_2 of this ProductAPIScanConfiguration.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                service_key_2 is not None and len(service_key_2) > 200):
            raise ValueError("Invalid value for `service_key_2`, length must be less than or equal to `200`")  # noqa: E501

        self._service_key_2 = service_key_2

    @property
    def service_key_3(self):
        """Gets the service_key_3 of this ProductAPIScanConfiguration.  # noqa: E501


        :return: The service_key_3 of this ProductAPIScanConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._service_key_3

    @service_key_3.setter
    def service_key_3(self, service_key_3):
        """Sets the service_key_3 of this ProductAPIScanConfiguration.


        :param service_key_3: The service_key_3 of this ProductAPIScanConfiguration.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                service_key_3 is not None and len(service_key_3) > 200):
            raise ValueError("Invalid value for `service_key_3`, length must be less than or equal to `200`")  # noqa: E501

        self._service_key_3 = service_key_3

    @property
    def product(self):
        """Gets the product of this ProductAPIScanConfiguration.  # noqa: E501


        :return: The product of this ProductAPIScanConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProductAPIScanConfiguration.


        :param product: The product of this ProductAPIScanConfiguration.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and product is None:  # noqa: E501
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def tool_configuration(self):
        """Gets the tool_configuration of this ProductAPIScanConfiguration.  # noqa: E501


        :return: The tool_configuration of this ProductAPIScanConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._tool_configuration

    @tool_configuration.setter
    def tool_configuration(self, tool_configuration):
        """Sets the tool_configuration of this ProductAPIScanConfiguration.


        :param tool_configuration: The tool_configuration of this ProductAPIScanConfiguration.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and tool_configuration is None:  # noqa: E501
            raise ValueError("Invalid value for `tool_configuration`, must not be `None`")  # noqa: E501

        self._tool_configuration = tool_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductAPIScanConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductAPIScanConfiguration):
            return True

        return self.to_dict() != other.to_dict()
