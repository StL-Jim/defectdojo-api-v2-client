# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse20047Prefetch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'findings_affected': 'dict(str, Finding)',
        'test': 'dict(str, Test)'
    }

    attribute_map = {
        'findings_affected': 'findings_affected',
        'test': 'test'
    }

    def __init__(self, findings_affected=None, test=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20047Prefetch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._findings_affected = None
        self._test = None
        self.discriminator = None

        if findings_affected is not None:
            self.findings_affected = findings_affected
        if test is not None:
            self.test = test

    @property
    def findings_affected(self):
        """Gets the findings_affected of this InlineResponse20047Prefetch.  # noqa: E501


        :return: The findings_affected of this InlineResponse20047Prefetch.  # noqa: E501
        :rtype: dict(str, Finding)
        """
        return self._findings_affected

    @findings_affected.setter
    def findings_affected(self, findings_affected):
        """Sets the findings_affected of this InlineResponse20047Prefetch.


        :param findings_affected: The findings_affected of this InlineResponse20047Prefetch.  # noqa: E501
        :type: dict(str, Finding)
        """

        self._findings_affected = findings_affected

    @property
    def test(self):
        """Gets the test of this InlineResponse20047Prefetch.  # noqa: E501


        :return: The test of this InlineResponse20047Prefetch.  # noqa: E501
        :rtype: dict(str, Test)
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this InlineResponse20047Prefetch.


        :param test: The test of this InlineResponse20047Prefetch.  # noqa: E501
        :type: dict(str, Test)
        """

        self._test = test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20047Prefetch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20047Prefetch):
            return True

        return self.to_dict() != other.to_dict()
