# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EndpointMetaImporter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file': 'str',
        'create_endpoints': 'bool',
        'create_tags': 'bool',
        'create_dojo_meta': 'bool',
        'product_name': 'str',
        'product': 'int',
        'product_id': 'int'
    }

    attribute_map = {
        'file': 'file',
        'create_endpoints': 'create_endpoints',
        'create_tags': 'create_tags',
        'create_dojo_meta': 'create_dojo_meta',
        'product_name': 'product_name',
        'product': 'product',
        'product_id': 'product_id'
    }

    def __init__(self, file=None, create_endpoints=True, create_tags=True, create_dojo_meta=False, product_name=None, product=None, product_id=None, local_vars_configuration=None):  # noqa: E501
        """EndpointMetaImporter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file = None
        self._create_endpoints = None
        self._create_tags = None
        self._create_dojo_meta = None
        self._product_name = None
        self._product = None
        self._product_id = None
        self.discriminator = None

        if file is not None:
            self.file = file
        if create_endpoints is not None:
            self.create_endpoints = create_endpoints
        if create_tags is not None:
            self.create_tags = create_tags
        if create_dojo_meta is not None:
            self.create_dojo_meta = create_dojo_meta
        if product_name is not None:
            self.product_name = product_name
        if product is not None:
            self.product = product
        if product_id is not None:
            self.product_id = product_id

    @property
    def file(self):
        """Gets the file of this EndpointMetaImporter.  # noqa: E501


        :return: The file of this EndpointMetaImporter.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this EndpointMetaImporter.


        :param file: The file of this EndpointMetaImporter.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def create_endpoints(self):
        """Gets the create_endpoints of this EndpointMetaImporter.  # noqa: E501


        :return: The create_endpoints of this EndpointMetaImporter.  # noqa: E501
        :rtype: bool
        """
        return self._create_endpoints

    @create_endpoints.setter
    def create_endpoints(self, create_endpoints):
        """Sets the create_endpoints of this EndpointMetaImporter.


        :param create_endpoints: The create_endpoints of this EndpointMetaImporter.  # noqa: E501
        :type: bool
        """

        self._create_endpoints = create_endpoints

    @property
    def create_tags(self):
        """Gets the create_tags of this EndpointMetaImporter.  # noqa: E501


        :return: The create_tags of this EndpointMetaImporter.  # noqa: E501
        :rtype: bool
        """
        return self._create_tags

    @create_tags.setter
    def create_tags(self, create_tags):
        """Sets the create_tags of this EndpointMetaImporter.


        :param create_tags: The create_tags of this EndpointMetaImporter.  # noqa: E501
        :type: bool
        """

        self._create_tags = create_tags

    @property
    def create_dojo_meta(self):
        """Gets the create_dojo_meta of this EndpointMetaImporter.  # noqa: E501


        :return: The create_dojo_meta of this EndpointMetaImporter.  # noqa: E501
        :rtype: bool
        """
        return self._create_dojo_meta

    @create_dojo_meta.setter
    def create_dojo_meta(self, create_dojo_meta):
        """Sets the create_dojo_meta of this EndpointMetaImporter.


        :param create_dojo_meta: The create_dojo_meta of this EndpointMetaImporter.  # noqa: E501
        :type: bool
        """

        self._create_dojo_meta = create_dojo_meta

    @property
    def product_name(self):
        """Gets the product_name of this EndpointMetaImporter.  # noqa: E501


        :return: The product_name of this EndpointMetaImporter.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this EndpointMetaImporter.


        :param product_name: The product_name of this EndpointMetaImporter.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                product_name is not None and len(product_name) < 1):
            raise ValueError("Invalid value for `product_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._product_name = product_name

    @property
    def product(self):
        """Gets the product of this EndpointMetaImporter.  # noqa: E501


        :return: The product of this EndpointMetaImporter.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this EndpointMetaImporter.


        :param product: The product of this EndpointMetaImporter.  # noqa: E501
        :type: int
        """

        self._product = product

    @property
    def product_id(self):
        """Gets the product_id of this EndpointMetaImporter.  # noqa: E501


        :return: The product_id of this EndpointMetaImporter.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this EndpointMetaImporter.


        :param product_id: The product_id of this EndpointMetaImporter.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointMetaImporter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EndpointMetaImporter):
            return True

        return self.to_dict() != other.to_dict()
