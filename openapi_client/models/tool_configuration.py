# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ToolConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'url': 'str',
        'authentication_type': 'str',
        'extras': 'str',
        'username': 'str',
        'password': 'str',
        'auth_title': 'str',
        'ssh': 'str',
        'api_key': 'str',
        'tool_type': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'url': 'url',
        'authentication_type': 'authentication_type',
        'extras': 'extras',
        'username': 'username',
        'password': 'password',
        'auth_title': 'auth_title',
        'ssh': 'ssh',
        'api_key': 'api_key',
        'tool_type': 'tool_type'
    }

    def __init__(self, id=None, name=None, description=None, url=None, authentication_type=None, extras=None, username=None, password=None, auth_title=None, ssh=None, api_key=None, tool_type=None, local_vars_configuration=None):  # noqa: E501
        """ToolConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._url = None
        self._authentication_type = None
        self._extras = None
        self._username = None
        self._password = None
        self._auth_title = None
        self._ssh = None
        self._api_key = None
        self._tool_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.description = description
        self.url = url
        self.authentication_type = authentication_type
        self.extras = extras
        self.username = username
        self.password = password
        self.auth_title = auth_title
        self.ssh = ssh
        self.api_key = api_key
        self.tool_type = tool_type

    @property
    def id(self):
        """Gets the id of this ToolConfiguration.  # noqa: E501


        :return: The id of this ToolConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ToolConfiguration.


        :param id: The id of this ToolConfiguration.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ToolConfiguration.  # noqa: E501


        :return: The name of this ToolConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ToolConfiguration.


        :param name: The name of this ToolConfiguration.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ToolConfiguration.  # noqa: E501


        :return: The description of this ToolConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ToolConfiguration.


        :param description: The description of this ToolConfiguration.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 2000):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2000`")  # noqa: E501

        self._description = description

    @property
    def url(self):
        """Gets the url of this ToolConfiguration.  # noqa: E501


        :return: The url of this ToolConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ToolConfiguration.


        :param url: The url of this ToolConfiguration.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) > 2000):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2000`")  # noqa: E501

        self._url = url

    @property
    def authentication_type(self):
        """Gets the authentication_type of this ToolConfiguration.  # noqa: E501


        :return: The authentication_type of this ToolConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this ToolConfiguration.


        :param authentication_type: The authentication_type of this ToolConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"API", "Password", "SSH"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and authentication_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `authentication_type` ({0}), must be one of {1}"  # noqa: E501
                .format(authentication_type, allowed_values)
            )

        self._authentication_type = authentication_type

    @property
    def extras(self):
        """Gets the extras of this ToolConfiguration.  # noqa: E501

        Additional definitions that will be consumed by scanner  # noqa: E501

        :return: The extras of this ToolConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this ToolConfiguration.

        Additional definitions that will be consumed by scanner  # noqa: E501

        :param extras: The extras of this ToolConfiguration.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                extras is not None and len(extras) > 255):
            raise ValueError("Invalid value for `extras`, length must be less than or equal to `255`")  # noqa: E501

        self._extras = extras

    @property
    def username(self):
        """Gets the username of this ToolConfiguration.  # noqa: E501


        :return: The username of this ToolConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ToolConfiguration.


        :param username: The username of this ToolConfiguration.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) > 200):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `200`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this ToolConfiguration.  # noqa: E501


        :return: The password of this ToolConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ToolConfiguration.


        :param password: The password of this ToolConfiguration.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                password is not None and len(password) > 600):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `600`")  # noqa: E501

        self._password = password

    @property
    def auth_title(self):
        """Gets the auth_title of this ToolConfiguration.  # noqa: E501


        :return: The auth_title of this ToolConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._auth_title

    @auth_title.setter
    def auth_title(self, auth_title):
        """Sets the auth_title of this ToolConfiguration.


        :param auth_title: The auth_title of this ToolConfiguration.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                auth_title is not None and len(auth_title) > 200):
            raise ValueError("Invalid value for `auth_title`, length must be less than or equal to `200`")  # noqa: E501

        self._auth_title = auth_title

    @property
    def ssh(self):
        """Gets the ssh of this ToolConfiguration.  # noqa: E501


        :return: The ssh of this ToolConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ssh

    @ssh.setter
    def ssh(self, ssh):
        """Sets the ssh of this ToolConfiguration.


        :param ssh: The ssh of this ToolConfiguration.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                ssh is not None and len(ssh) > 6000):
            raise ValueError("Invalid value for `ssh`, length must be less than or equal to `6000`")  # noqa: E501

        self._ssh = ssh

    @property
    def api_key(self):
        """Gets the api_key of this ToolConfiguration.  # noqa: E501


        :return: The api_key of this ToolConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ToolConfiguration.


        :param api_key: The api_key of this ToolConfiguration.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                api_key is not None and len(api_key) > 600):
            raise ValueError("Invalid value for `api_key`, length must be less than or equal to `600`")  # noqa: E501

        self._api_key = api_key

    @property
    def tool_type(self):
        """Gets the tool_type of this ToolConfiguration.  # noqa: E501


        :return: The tool_type of this ToolConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._tool_type

    @tool_type.setter
    def tool_type(self, tool_type):
        """Sets the tool_type of this ToolConfiguration.


        :param tool_type: The tool_type of this ToolConfiguration.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and tool_type is None:  # noqa: E501
            raise ValueError("Invalid value for `tool_type`, must not be `None`")  # noqa: E501

        self._tool_type = tool_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToolConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ToolConfiguration):
            return True

        return self.to_dict() != other.to_dict()
